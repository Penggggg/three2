"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_js_1 = require("../../util/http.js");
var index_js_1 = require("../../lib/vuefy/index.js");
var route_js_1 = require("../../util/route.js");
var app = getApp();
var storageKey = 'trip-has-reward-list';
Page({
    data: {
        tid: '',
        openid: '',
        ipAvatar: '',
        ipName: '',
        isAdm: false,
        isAuth: false,
        loading: true,
        swiperIndex: 0,
        showDanmu: false,
        list: [],
        showHongbao: 'hide',
        hasGet: true
    },
    runComputed: function () {
        index_js_1.computed(this, {
            social$: function () {
                var avatar = 'https://wx.qlogo.cn/mmopen/vi_32/IejMVZTG8WlibHicHIVQhqcNeC4uBxkzH0FFTbRLMicxib8wrxRRWoJY3gvctylATdmAPhiaVicU4sH0NptSszBdyHiaA/132';
                var getRandom = function (n) { return Math.floor(Math.random() * n); };
                var allTexts = [
                    "\u68D2! \u62FC\u56E2\u7684\u7FA4\u53CB\u771F\u7ED9\u529B",
                    "\u54C7! \u548C\u7FA4\u53CB\u62FC\u56E2\u597D\u5212\u7B97",
                    "\u54C8! \u4E0B\u6B21\u7EE7\u7EED\u7528\u7FA4\u62FC\u56E2"
                ];
                var visitors = [
                    avatar,
                    avatar
                ];
                var allVisitors = visitors
                    .map(function (x) {
                    var randomNum = getRandom(allTexts.length);
                    return {
                        avatar: x,
                        text: allTexts[randomNum]
                    };
                });
                return allVisitors;
            },
            others$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var otherList = list
                    .filter(function (x) {
                    return !x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = otherList.map(function (sl) { return _this.transferSl(sl); });
                var result = r.map(function (x) {
                    var pid = x.pid, goodImg = x.goodImg, buyer = x.buyer, totalDelta = x.totalDelta, name = x.name, title = x.title;
                    return {
                        pid: pid,
                        img: goodImg,
                        topTips: (buyer.length > 1 ? buyer.length + '人' : '') + "\u7701" + totalDelta + "\u5143",
                        bottomTips: buyer.length + "\u7FA4\u53CB\u62FC\u56E2",
                        avatars: buyer.map(function (y) { return y.avatar; }),
                        title: "" + (name ? name + ' ' : '') + title
                    };
                });
                return result;
            },
            personal$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allTexts = [
                    "\u771F\u7ED9\u529B",
                    "\u8C22\u8C22\u4F60",
                    "\u5212\u7B97\uFF5E",
                    "\u68D2!",
                    "\u8D5E!",
                    "\u8D5A!"
                ];
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = myList.map(function (sl) { return _this.transferSl(sl, allTexts); });
                return r;
            },
            all$: function () {
                var _this = this;
                var list = this.data.list;
                var allTexts = [
                    "\u771F\u7ED9\u529B",
                    "\u8C22\u8C22\u4F60",
                    "\u5212\u7B97\uFF5E",
                    "\u68D2!",
                    "\u8D5E!",
                    "\u8D5A!"
                ];
                var r = list.map(function (sl) { return _this.transferSl(sl, allTexts); });
                return r;
            },
            summary$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allSl = list.map(function (sl) { return _this.transferSl(sl); });
                var mySL = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .map(function (sl) { return _this.transferSl(sl); });
                var r = {
                    groupTotalDelta: allSl.reduce(function (x, y) {
                        return x + (y.buyer.length > 1 ? y.totalDelta : 0);
                    }, 0),
                    myTotalDelta: mySL.reduce(function (x, y) { return x + y.successDelta; }, 0)
                };
                return r;
            },
            hongbao$: function () {
                var _a = this.data, list = _a.list, openid = _a.openid;
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                });
                var hasBuy = myList.length > 0;
                var gift = hasBuy ? 1.24 : 0.88;
                var somePinSuccess = myList.some(function (x) { return x.users.length > 1; });
                var title = hasBuy && somePinSuccess ?
                    '拼团成功' :
                    hasBuy && !somePinSuccess ?
                        '差点拼成' :
                        '群拼团 省钱!';
                var summary = hasBuy && somePinSuccess ?
                    '省钱啦！请再接再厉~' :
                    hasBuy && !somePinSuccess ?
                        '莫灰心！多邀请群友拼团' :
                        '下次跟着群友拼';
                return {
                    gift: gift,
                    title: title,
                    summary: summary
                };
            }
        });
    },
    watchStore: function () {
        var _this = this;
        app.watch$('appConfig', function (val) {
            if (!!val) {
                _this.setTitle((val['ip-name'] || '') + "\u7FA4\u62FC\u56E2");
                _this.setData({
                    ipName: val['ip-name'],
                    ipAvatar: "" + (val['ip-avatar'] || '')
                });
            }
        });
        app.watch$('openid', function (val) {
            !!val && _this.setData({
                openid: val
            });
        });
        app.watch$('isUserAuth', function (val) {
            if (val === undefined) {
                return;
            }
            _this.setData({
                isAuth: val
            });
        });
        app.watch$('role', function (val) {
            if (val === 0) {
                wx.hideShareMenu({});
            }
            else {
                wx.showShareMenu({
                    withShareTicket: false
                });
            }
        });
    },
    fetchShopping: function (tid) {
        var _this = this;
        if (!tid) {
            return;
        }
        http_js_1.http({
            url: 'shopping-list_pin',
            data: {
                tid: tid,
                detail: true,
                showUser: true
            },
            success: function (res) {
                var status = res.status, data = res.data;
                if (status !== 200) {
                    return;
                }
                _this.setData({
                    list: data,
                    loading: false,
                    showHongbao: 'show'
                });
            }
        });
    },
    fetchGetGift: function () {
        var _this = this;
        var _a = this.data, tid = _a.tid, hasGet = _a.hasGet;
        var hongbao$ = this.data.hongbao$;
        if (hasGet) {
            wx.showToast({
                title: '已领取'
            });
            return this.toggleHongbao();
        }
        http_js_1.http({
            url: 'common_get-integral',
            data: {
                integral: hongbao$.gift
            },
            loadingMsg: '领取中...',
            success: function (res) {
                var status = res.status;
                if (status !== 200) {
                    return;
                }
                wx.showToast({
                    title: '领取成功'
                });
                _this.toggleHongbao();
                _this.setTripReward(tid);
                _this.checkIsGet(tid);
            }
        });
    },
    setTitle: function (title) {
        if (!title) {
            return;
        }
        wx.setNavigationBarTitle({
            title: title
        });
    },
    transferSl: function (sl, allTexts) {
        if (allTexts === void 0) { allTexts = []; }
        var pid = sl.pid, adjustGroupPrice = sl.adjustGroupPrice, adjustPrice = sl.adjustPrice, users = sl.users, detail = sl.detail;
        var delta = adjustGroupPrice ? Math.ceil(adjustPrice - adjustGroupPrice) : 0;
        var totalDelta = delta * users.length;
        var getRandom = function (n) { return Math.floor(Math.random() * n); };
        return {
            pid: pid,
            price: adjustPrice,
            groupPrice: adjustGroupPrice,
            fadePrice: detail.good.fadePrice,
            title: detail.title,
            name: detail.name || '',
            goodImg: detail.img,
            delta: delta,
            totalDelta: totalDelta,
            successDelta: users.length > 1 ? delta : 0,
            buyer: users.map(function (x) { return ({
                name: x.nickName,
                avatar: x.avatarUrl
            }); }),
            pinSuccess: users.length > 1,
            tips: allTexts[getRandom(allTexts.length)],
            tipsIndex: getRandom(users.length > 4 ? 3 : users.length - 1) + 1
        };
    },
    toggleHongbao: function () {
        var showHongbao = this.data.showHongbao;
        this.setData({
            showHongbao: showHongbao === 'show' ? 'hide' : 'show'
        });
    },
    goGoodDetail: function (e) {
        var data = e.currentTarget.dataset.data;
        route_js_1.navTo("/pages/goods-detail/index?id=" + data.pid);
    },
    goHome: function () {
        route_js_1.navTo("/pages/trip-enter/index");
    },
    onSubscribe: function () {
        app.getSubscribe('buyPin,hongbao,trip');
        this.fetchGetGift();
    },
    getUserAuth: function () {
        var _this = this;
        app.getWxUserInfo(function () {
            _this.fetchGetGift();
        });
    },
    setTripReward: function (tid) {
        var tripSum = 10;
        var hasRewardList = JSON.parse(wx.getStorageSync(storageKey) || '[ ]');
        hasRewardList.unshift(tid);
        wx.setStorageSync(storageKey, JSON.stringify(hasRewardList.slice(0, tripSum)));
    },
    checkIsGet: function (tid) {
        var hasRewardList = JSON.parse(wx.getStorageSync(storageKey) || '[ ]');
        this.setData({
            hasGet: hasRewardList.includes(tid)
        });
    },
    onSwiper: function (e) {
        var current = e.detail.current;
        this.setData({
            swiperIndex: current
        });
    },
    onScroll: function (e) {
        var showDanmu = this.data.showDanmu;
        var scrollTop = e.detail.scrollTop;
        if (!!showDanmu) {
            return;
        }
        if (scrollTop > 100) {
            this.setData({
                showDanmu: true
            });
        }
    },
    onLoad: function (query) {
        var tid = query.tid || "e8f863ba5de6241400076921441bc8d5";
        this.watchStore();
        this.runComputed();
        this.setData({
            tid: tid
        });
        this.checkIsGet(tid);
        this.fetchShopping(tid);
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function (e) {
        var _a = this.data, ipName = _a.ipName, tid = _a.tid, isAdm = _a.isAdm;
        return {
            title: (ipName || '群拼团') + "\u56DE\u62A5\u5927\u5BB6\u5566 \u70B9\u51FB\u9886\u53D6\u62B5\u73B0\u91D1",
            imageUrl: 'https://global-1257764567.cos.ap-guangzhou.myqcloud.com/bg-trip-reward-share-colorful.jpg',
            path: "/pages/trip-reward/index?tid=" + tid
        };
    }
});
//# sourceMappingURL=data:application/json;base64,