"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_js_1 = require("../../util/http.js");
var index_js_1 = require("../../lib/vuefy/index.js");
var route_js_1 = require("../../util/route.js");
var app = getApp();
Page({
    data: {
        tid: '',
        openid: '',
        ipAvatar: '',
        isAuth: false,
        loading: true,
        swiperIndex: 0,
        showDanmu: false,
        list: [],
        showHongbao: 'hide'
    },
    runComputed: function () {
        index_js_1.computed(this, {
            social$: function () {
                var avatar = 'https://wx.qlogo.cn/mmopen/vi_32/IejMVZTG8WlibHicHIVQhqcNeC4uBxkzH0FFTbRLMicxib8wrxRRWoJY3gvctylATdmAPhiaVicU4sH0NptSszBdyHiaA/132';
                var getRandom = function (n) { return Math.floor(Math.random() * n); };
                var allTexts = [
                    "\u68D2! \u62FC\u56E2\u7684\u7FA4\u53CB\u771F\u7ED9\u529B",
                    "\u54C7! \u548C\u7FA4\u53CB\u62FC\u56E2\u597D\u5212\u7B97",
                    "\u54C8! \u4E0B\u6B21\u7EE7\u7EED\u7528\u7FA4\u62FC\u56E2"
                ];
                var visitors = [
                    avatar,
                    avatar
                ];
                var allVisitors = visitors
                    .map(function (x) {
                    var randomNum = getRandom(allTexts.length);
                    return {
                        avatar: x,
                        text: allTexts[randomNum]
                    };
                });
                return allVisitors;
            },
            others$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var otherList = list
                    .filter(function (x) {
                    return !x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = otherList.map(function (sl) { return _this.transferSl(sl); });
                return r;
            },
            personal$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allTexts = [
                    "\u771F\u7ED9\u529B",
                    "\u8C22\u8C22\u4F60",
                    "\u5212\u7B97\uFF5E",
                    "\u68D2!",
                    "\u8D5E!",
                    "\u8D5A!"
                ];
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = myList.map(function (sl) { return _this.transferSl(sl, allTexts); });
                return r;
            },
            summary$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allSl = list.map(function (sl) { return _this.transferSl(sl); });
                var mySL = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .map(function (sl) { return _this.transferSl(sl); });
                var r = {
                    groupTotalDelta: allSl.reduce(function (x, y) { return x + y.totalDelta; }, 0),
                    myTotalDelta: mySL.reduce(function (x, y) { return x + y.successDelta; }, 0)
                };
                return r;
            },
            hongbao$: function () {
                var _a = this.data, list = _a.list, openid = _a.openid;
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                });
                var hasBuy = myList.length > 0;
                var gift = hasBuy ? 1.24 : 0.88;
                var somePinSuccess = myList.some(function (x) { return x.users.length > 1; });
                var title = hasBuy && somePinSuccess ?
                    '拼团成功' :
                    hasBuy && !somePinSuccess ?
                        '莫灰心' :
                        '下次跟着拼';
                var summary = hasBuy && somePinSuccess ?
                    '请再接再厉~' :
                    hasBuy && !somePinSuccess ?
                        '差点就拼成!' :
                        '群拼团 省钱!';
                return {
                    gift: gift,
                    title: title,
                    summary: summary
                };
            }
        });
    },
    watchStore: function () {
        var _this = this;
        app.watch$('appConfig', function (val) {
            if (!!val) {
                _this.setTitle((val['ip-name'] || '') + "\u7FA4\u62FC\u56E2");
                _this.setData({
                    ipAvatar: "" + (val['ip-avatar'] || '')
                });
            }
        });
        app.watch$('openid', function (val) {
            !!val && _this.setData({
                openid: val
            });
        });
        app.watch$('isUserAuth', function (val) {
            if (val === undefined) {
                return;
            }
            _this.setData({
                isAuth: val
            });
        });
    },
    fetchShopping: function (tid) {
        var _this = this;
        if (!tid) {
            return;
        }
        http_js_1.http({
            url: 'shopping-list_pin',
            data: {
                tid: tid,
                detail: true,
                showUser: true
            },
            success: function (res) {
                var status = res.status, data = res.data;
                if (status !== 200) {
                    return;
                }
                _this.setData({
                    list: data,
                    loading: false,
                    showHongbao: 'show'
                });
            }
        });
    },
    setTitle: function (title) {
        if (!title) {
            return;
        }
        wx.setNavigationBarTitle({
            title: title
        });
    },
    transferSl: function (sl, allTexts) {
        if (allTexts === void 0) { allTexts = []; }
        var pid = sl.pid, adjustGroupPrice = sl.adjustGroupPrice, adjustPrice = sl.adjustPrice, users = sl.users, detail = sl.detail;
        var delta = adjustGroupPrice ? Math.ceil(adjustPrice - adjustGroupPrice) : 0;
        var totalDelta = delta * users.length;
        var getRandom = function (n) { return Math.floor(Math.random() * n); };
        return {
            pid: pid,
            price: adjustPrice,
            groupPrice: adjustGroupPrice,
            fadePrice: detail.good.fadePrice,
            title: detail.title,
            name: detail.name || '',
            goodImg: detail.img,
            delta: delta,
            totalDelta: totalDelta,
            successDelta: users.length > 1 ? delta : 0,
            buyer: users.map(function (x) { return ({
                name: x.nickName,
                avatar: x.avatarUrl
            }); }),
            pinSuccess: users.length > 1,
            tips: allTexts[getRandom(allTexts.length)],
            tipsIndex: getRandom(users.length > 4 ? 3 : users.length - 1) + 1
        };
    },
    toggleHongbao: function () {
        var showHongbao = this.data.showHongbao;
        this.setData({
            showHongbao: showHongbao === 'show' ? 'hide' : 'show'
        });
    },
    goGoodDetail: function (e) {
        var data = e.currentTarget.dataset.data;
        route_js_1.navTo("/pages/goods-detail/index?id=" + data.pid);
    },
    onSubscribe: function () {
        app.getSubscribe('buyPin,waitPin,trip');
    },
    getUserAuth: function () {
        app.getWxUserInfo(function () {
        });
    },
    onSwiper: function (e) {
        var current = e.detail.current;
        this.setData({
            swiperIndex: current
        });
    },
    onScroll: function (e) {
        var showDanmu = this.data.showDanmu;
        var scrollTop = e.detail.scrollTop;
        if (!!showDanmu) {
            return;
        }
        if (scrollTop > 100) {
            this.setData({
                showDanmu: true
            });
        }
    },
    onLoad: function (query) {
        var tid = query.tid || "e8f863ba5de6241400076921441bc8d5";
        this.watchStore();
        this.runComputed();
        this.setData({
            tid: tid
        });
        this.fetchShopping(tid);
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDhDQUEwQztBQUMxQyxxREFBb0Q7QUFFcEQsZ0RBQTRDO0FBRTVDLElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBUSxDQUFDO0FBRTNCLElBQUksQ0FBQztJQUVELElBQUksRUFBRTtRQUVGLEdBQUcsRUFBRSxFQUFFO1FBRVAsTUFBTSxFQUFFLEVBQUU7UUFFVixRQUFRLEVBQUUsRUFBRTtRQUtaLE1BQU0sRUFBRSxLQUFLO1FBS2IsT0FBTyxFQUFFLElBQUk7UUFLYixXQUFXLEVBQUUsQ0FBQztRQUtkLFNBQVMsRUFBRSxLQUFLO1FBS2hCLElBQUksRUFBRSxFQUFHO1FBS1QsV0FBVyxFQUFFLE1BQU07S0FFdEI7SUFFRCxXQUFXO1FBQ1AsbUJBQVEsQ0FBRSxJQUFJLEVBQUU7WUFHWixPQUFPO2dCQUNILElBQU0sTUFBTSxHQUFHLG9JQUFvSSxDQUFDO2dCQUNwSixJQUFNLFNBQVMsR0FBRyxVQUFBLENBQUMsSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsQ0FBRSxFQUFoQyxDQUFnQyxDQUFDO2dCQUN4RCxJQUFNLFFBQVEsR0FBRztvQkFDYiwwREFBYTtvQkFDYiwwREFBYTtvQkFDYiwwREFBYTtpQkFDaEIsQ0FBQztnQkFFRixJQUFNLFFBQVEsR0FBRztvQkFDYixNQUFNO29CQUNOLE1BQU07aUJBQ1QsQ0FBQztnQkFDRixJQUFNLFdBQVcsR0FBRyxRQUFRO3FCQUN2QixHQUFHLENBQUUsVUFBQSxDQUFDO29CQUNILElBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBRSxRQUFRLENBQUMsTUFBTSxDQUFFLENBQUM7b0JBQy9DLE9BQU87d0JBQ0gsTUFBTSxFQUFFLENBQUM7d0JBQ1QsSUFBSSxFQUFFLFFBQVEsQ0FBRSxTQUFTLENBQUU7cUJBQzlCLENBQUE7Z0JBQ0ws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cG9ydCB7IGh0dHAgfSBmcm9tICcuLi8uLi91dGlsL2h0dHAuanMnO1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICcuLi8uLi9saWIvdnVlZnkvaW5kZXguanMnO1xuaW1wb3J0IHsgZGVsYXllcmluZ0dvb2QgfSBmcm9tICcuLi8uLi91dGlsL2dvb2RzLmpzJztcbmltcG9ydCB7IG5hdlRvIH0gZnJvbSAnLi4vLi4vdXRpbC9yb3V0ZS5qcyc7XG5cbmNvbnN0IGFwcCA9IGdldEFwcDxhbnk+KCApO1xuXG5QYWdlKHtcblxuICAgIGRhdGE6IHtcblxuICAgICAgICB0aWQ6ICcnLFxuXG4gICAgICAgIG9wZW5pZDogJycsXG5cbiAgICAgICAgaXBBdmF0YXI6ICcnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmmK/lkKbmnInnlKjmiLfmjojmnYNcbiAgICAgICAgICovXG4gICAgICAgIGlzQXV0aDogZmFsc2UsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWKoOi9vVxuICAgICAgICAgKi9cbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICog5YW25LuW5Lq65riF5Y2V55qEIHN3aXBlclxuICAgICAgICAgKi9cbiAgICAgICAgc3dpcGVySW5kZXg6IDAsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuWxleekuuW8ueW5lVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0Rhbm11OiBmYWxzZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICog6LSt54mp5riF5Y2VXG4gICAgICAgICAqL1xuICAgICAgICBsaXN0OiBbIF0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWxleekuue6ouWMhVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0hvbmdiYW86ICdoaWRlJ1xuXG4gICAgfSxcblxuICAgIHJ1bkNvbXB1dGVkKCApIHtcbiAgICAgICAgY29tcHV0ZWQoIHRoaXMsIHtcblxuICAgICAgICAgICAgLy8g6LSt5Lmw6K6w5b2VICsg56S+5Lqk5bGe5oCn5qih5Z2XXG4gICAgICAgICAgICBzb2NpYWwkKCApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdmF0YXIgPSAnaHR0cHM6Ly93eC5xbG9nby5jbi9tbW9wZW4vdmlfMzIvSWVqTVZaVEc4V2xpYkhpY0hJVlFocWNOZUM0dUJ4a3pIMEZGVGJSTE1pY3hpYjh3cnhSUldvSlkzZ3ZjdHlsQVRkbUFQaGlhVmljVTRzSDBOcHRTc3pCZHlIaWFBLzEzMic7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2V0UmFuZG9tID0gbiA9PiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSggKSAqIG4gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxUZXh0cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgYOajkiEg5ou85Zui55qE576k5Y+L55yf57uZ5YqbYCxcbiAgICAgICAgICAgICAgICAgICAgYOWThyEg5ZKM576k5Y+L5ou85Zui5aW95YiS566XYCxcbiAgICAgICAgICAgICAgICAgICAgYOWTiCEg5LiL5qyh57un57ut55So576k5ou85ZuiYFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgdmlzaXRvcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxWaXNpdG9ycyA9IHZpc2l0b3JzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoIHggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZG9tTnVtID0gZ2V0UmFuZG9tKCBhbGxUZXh0cy5sZW5ndGggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhdGFyOiB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGFsbFRleHRzWyByYW5kb21OdW0gXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVybiBhbGxWaXNpdG9ycztcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8g5YW25LuW5Lq6KOaIluiAheaYr+aJgOacieS6uueahCnnmoTotK3nianmuIXljZVcbiAgICAgICAgICAgIG90aGVycyQoICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGlzdCwgb3BlbmlkIH0gPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJMaXN0ID0gbGlzdFxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCB4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAheC51c2Vycy5maW5kKCB5ID0+IHkub3BlbmlkID09PSBvcGVuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoKCB4LCB5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkudXNlcnMubGVuZ3RoIC0geC51c2Vycy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByID0gb3RoZXJMaXN0Lm1hcCggc2wgPT4gdGhpcy50cmFuc2ZlclNsKCBzbCApKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIOS4quS6uui0reeJqea4heWNlVxuICAgICAgICAgICAgcGVyc29uYWwkKCApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxpc3QsIG9wZW5pZCB9ID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFRleHRzID0gW1xuICAgICAgICAgICAgICAgICAgICBg55yf57uZ5YqbYCxcbiAgICAgICAgICAgICAgICAgICAgYOiwouiwouS9oGAsXG4gICAgICAgICAgICAgICAgICAgIGDliJLnrpfvvZ5gLFxuICAgICAgICAgICAgICAgICAgICBg5qOSIWAsXG4gICAgICAgICAgICAgICAgICAgIGDotZ4hYCxcbiAgICAgICAgICAgICAgICAgICAgYOi1miFgXG4gICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG15TGlzdCA9IGxpc3RcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlciggeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geC51c2Vycy5maW5kKCB5ID0+IHkub3BlbmlkID09PSBvcGVuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoKCB4LCB5ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkudXNlcnMubGVuZ3RoIC0geC51c2Vycy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByID0gbXlMaXN0Lm1hcCggc2wgPT4gdGhpcy50cmFuc2ZlclNsKCBzbCwgYWxsVGV4dHMgKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyDooYznqIvmuIXljZXmgLvmpoLlhrVcbiAgICAgICAgICAgIHN1bW1hcnkkKCApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxpc3QsIG9wZW5pZCB9ID0gdGhpcy5kYXRhO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYWxsU2wgPSBsaXN0Lm1hcCggc2wgPT4gdGhpcy50cmFuc2ZlclNsKCBzbCApKTtcbiAgICAgICAgICAgICAgICBjb25zdCBteVNMID0gbGlzdFxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCB4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4LnVzZXJzLmZpbmQoIHkgPT4geS5vcGVuaWQgPT09IG9wZW5pZCApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAubWFwKCBzbCA9PiB0aGlzLnRyYW5zZmVyU2woIHNsICkpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHtcbiAgICAgICAgICAgICAgICAgICAgLy8g5omA5pyJ576k5Y+L77yM5LiA5YWx55yB5LqG5aSa5bCRXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwVG90YWxEZWx0YTogYWxsU2wucmVkdWNlKCggeCwgeSApID0+IHggKyB5LnRvdGFsRGVsdGEsIDAgKSxcbiAgICAgICAgICAgICAgICAgICAgLy8g5oiR5LiA5YWx55yB5LqG5aSa5bCRXG4gICAgICAgICAgICAgICAgICAgIG15VG90YWxEZWx0YTogbXlTTC5yZWR1Y2UoKCB4LCB5ICkgPT4geCArIHkuc3VjY2Vzc0RlbHRhLCAwIClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8g5oq1546w6YeR55qE5aWW5Yqx6YeR6aKdXG4gICAgICAgICAgICBob25nYmFvJCggKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsaXN0LCBvcGVuaWQgfSA9IHRoaXMuZGF0YTtcblxuICAgICAgICAgICAgICAgIC8vIOaIkeeahOi0reeJqea4heWNlVxuICAgICAgICAgICAgICAgIGNvbnN0IG15TGlzdCA9IGxpc3RcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlciggeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geC51c2Vycy5maW5kKCB5ID0+IHkub3BlbmlkID09PSBvcGVuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyDmmK/lkKbmnInkubDov4fkuJzopb9cbiAgICAgICAgICAgICAgICBjb25zdCBoYXNCdXkgPSBteUxpc3QubGVuZ3RoID4gMDtcblxuICAgICAgICAgICAgICAgIC8vIOWlluWKsemHkeminVxuICAgICAgICAgICAgICAgIGNvbnN0IGdpZnQgPSBoYXNCdXkgPyAxLjI0IDogMC44ODtcblxuICAgICAgICAgICAgICAgIC8vIOaYr+WQpuacieaLvOWbouaIkOWKn1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvbWVQaW5TdWNjZXNzID0gbXlMaXN0LnNvbWUoIHggPT4geC51c2Vycy5sZW5ndGggPiAxICk7XG5cbiAgICAgICAgICAgICAgICAvLyDmlofmoYgxXG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBoYXNCdXkgJiYgc29tZVBpblN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgICAn5ou85Zui5oiQ5YqfJyA6XG4gICAgICAgICAgICAgICAgICAgIGhhc0J1eSAmJiAhc29tZVBpblN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgICAgICAgJ+iOq+eBsOW/gycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgJ+S4i+asoei3n+edgOaLvCc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g5paH5a6JMlxuICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnkgPSBoYXNCdXkgJiYgc29tZVBpblN1Y2Nlc3MgP1xuICAgICAgICAgICAgICAgICAgICAn6K+35YaN5o6l5YaN5Y6JficgOlxuICAgICAgICAgICAgICAgICAgICBoYXNCdXkgJiYgIXNvbWVQaW5TdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICflt67ngrnlsLHmi7zmiJAhJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAn576k5ou85ZuiIOecgemSsSEnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZ2lmdCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHN1bW1hcnlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOebkeWQrHN0b3JlXG4gICAgICovXG4gICAgd2F0Y2hTdG9yZSggKSB7XG4gICAgICAgIGFwcC53YXRjaCQoJ2FwcENvbmZpZycsIHZhbCA9PiB7XG4gICAgICAgICAgICBpZiAoICEhdmFsICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGl0bGUoYCR7dmFsWydpcC1uYW1lJ10gfHwgJyd9576k5ou85ZuiYClcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgICAgICAgICAgaXBBdmF0YXI6IGAke3ZhbFsnaXAtYXZhdGFyJ10gfHwgJyd9YFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhcHAud2F0Y2gkKCdvcGVuaWQnLCB2YWwgPT4ge1xuICAgICAgICAgICAgISF2YWwgJiYgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICAgICAgb3BlbmlkOiB2YWxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBhcHAud2F0Y2gkKCdpc1VzZXJBdXRoJywgdmFsID0+IHtcbiAgICAgICAgICAgIGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICAgICAgaXNBdXRoOiB2YWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIOaLieWPluihjOeoi+eahOi0reeJqeivt+WNleS/oeaBryAqL1xuICAgIGZldGNoU2hvcHBpbmcoIHRpZCApIHtcbiAgICAgICAgaWYgKCAhdGlkICkgeyByZXR1cm47IH1cblxuICAgICAgICBodHRwKHtcbiAgICAgICAgICAgIHVybDogJ3Nob3BwaW5nLWxpc3RfcGluJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0aWQsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dVc2VyOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHN0YXR1cywgZGF0YSB9ID0gcmVzO1xuICAgICAgICAgICAgICAgIGlmICggc3RhdHVzICE9PSAyMDAgKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgICAgICBsaXN0OiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd0hvbmdiYW86ICdzaG93J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiogXG4gICAgICog6K6+572u5qCH6aKYXG4gICAgICovXG4gICAgc2V0VGl0bGUoIHRpdGxlOiBzdHJpbmcgKSB7XG4gICAgICAgIGlmICggIXRpdGxlICkgeyByZXR1cm47IH1cbiAgICAgICAgd3guc2V0TmF2aWdhdGlvbkJhclRpdGxlKHtcbiAgICAgICAgICAgIHRpdGxlXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDovazmjaLmoLzlvI9cbiAgICAgKi9cbiAgICB0cmFuc2ZlclNsKCBzbCwgYWxsVGV4dHMgPSBbIF0pIHtcblxuICAgICAgICBjb25zdCB7IHBpZCwgYWRqdXN0R3JvdXBQcmljZSwgYWRqdXN0UHJpY2UsIHVzZXJzLCBkZXRhaWwgfSA9IHNsO1xuICAgICAgICBjb25zdCBkZWx0YSA9IGFkanVzdEdyb3VwUHJpY2UgPyBNYXRoLmNlaWwoIGFkanVzdFByaWNlIC0gYWRqdXN0R3JvdXBQcmljZSApIDogMDtcbiAgICAgICAgY29uc3QgdG90YWxEZWx0YSA9IGRlbHRhICogdXNlcnMubGVuZ3RoO1xuXG4gICAgICAgIGNvbnN0IGdldFJhbmRvbSA9IG4gPT4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oICkgKiBuICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBpZCxcbiAgICAgICAgICAgIHByaWNlOiBhZGp1c3RQcmljZSxcbiAgICAgICAgICAgIGdyb3VwUHJpY2U6IGFkanVzdEdyb3VwUHJpY2UsXG4gICAgICAgICAgICBmYWRlUHJpY2U6IGRldGFpbC5nb29kLmZhZGVQcmljZSxcbiAgICAgICAgICAgIHRpdGxlOiBkZXRhaWwudGl0bGUsXG4gICAgICAgICAgICBuYW1lOiBkZXRhaWwubmFtZSB8fCAnJyxcbiAgICAgICAgICAgIGdvb2RJbWc6IGRldGFpbC5pbWcsXG4gICAgICAgICAgICAvLyDmgLvlt67lgLxcbiAgICAgICAgICAgIGRlbHRhLCBcbiAgICAgICAgICAgIC8vIOi0reeJqea4heWNleaAu+W3ruWAvFxuICAgICAgICAgICAgdG90YWxEZWx0YSxcbiAgICAgICAgICAgIC8vIOaIkeeahOaIkOWKn+aLvOWbouW3ruWAvFxuICAgICAgICAgICAgc3VjY2Vzc0RlbHRhOiB1c2Vycy5sZW5ndGggPiAxID8gZGVsdGEgOiAwLFxuICAgICAgICAgICAgYnV5ZXI6IHVzZXJzLm1hcCggeCA9PiAoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHgubmlja05hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyOiB4LmF2YXRhclVybFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgcGluU3VjY2VzczogdXNlcnMubGVuZ3RoID4gMSxcbiAgICAgICAgICAgIHRpcHM6IGFsbFRleHRzWyBnZXRSYW5kb20oIGFsbFRleHRzLmxlbmd0aCApXSxcbiAgICAgICAgICAgIHRpcHNJbmRleDogZ2V0UmFuZG9tKCB1c2Vycy5sZW5ndGggPiA0ID8gMyA6IHVzZXJzLmxlbmd0aCAtIDEgKSArIDFcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDlvIDlhbPnuqLljIVcbiAgICAgKi9cbiAgICB0b2dnbGVIb25nYmFvKCApIHtcbiAgICAgICAgY29uc3QgeyBzaG93SG9uZ2JhbyB9ID0gdGhpcy5kYXRhO1xuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgIHNob3dIb25nYmFvOiBzaG93SG9uZ2JhbyA9PT0gJ3Nob3cnID8gJ2hpZGUnIDogJ3Nob3cnXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOi3s+WIsOWVhuWTgeivpuaDhVxuICAgICAqL1xuICAgIGdvR29vZERldGFpbCggZSApIHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICAgICAgbmF2VG8oYC9wYWdlcy9nb29kcy1kZXRhaWwvaW5kZXg/aWQ9JHtkYXRhLnBpZH1gKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDorqLpmIVcbiAgICAgKi9cbiAgICBvblN1YnNjcmliZSggKSB7XG4gICAgICAgIGFwcC5nZXRTdWJzY3JpYmUoJ2J1eVBpbix3YWl0UGluLHRyaXAnKTtcbiAgICB9LFxuXG4gICAgLyoqIFxuICAgICAqIOiOt+WPlueUqOaIt+aOiOadg1xuICAgICAqL1xuICAgIGdldFVzZXJBdXRoKCApIHtcbiAgICAgICAgYXBwLmdldFd4VXNlckluZm8oKCApID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMuZ2V0RnJlZUludGVncmFsKCB0cnVlICk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzd2lwZXLnm5HlkKxcbiAgICAgKi9cbiAgICBvblN3aXBlciggZTogYW55ICkge1xuICAgICAgICBjb25zdCB7IGN1cnJlbnQgfSA9IGUuZGV0YWlsO1xuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgIHN3aXBlckluZGV4OiBjdXJyZW50XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDpobXpnaLmu5rliqhcbiAgICAgKi9cbiAgICBvblNjcm9sbCggZTogYW55ICkge1xuICAgICAgICBjb25zdCB7IHNob3dEYW5tdSB9ID0gdGhpcy5kYXRhO1xuICAgICAgICBjb25zdCB7IHNjcm9sbFRvcCB9ID0gZS5kZXRhaWw7XG4gICAgICAgIGlmICggISFzaG93RGFubXUgKSB7IHJldHVybjsgfSBcblxuICAgICAgICBpZiAoIHNjcm9sbFRvcCA+IDEwMCApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgIHNob3dEYW5tdTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdGlkIOihjOeoi2lkXG4gICAgICovXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoIHF1ZXJ5OiBhbnkgKSB7XG4gICAgICAgIGNvbnN0IHRpZCA9IHF1ZXJ5LnRpZCB8fCBcImU4Zjg2M2JhNWRlNjI0MTQwMDA3NjkyMTQ0MWJjOGQ1XCI7XG4gICAgICAgIHRoaXMud2F0Y2hTdG9yZSggKTtcbiAgICAgICAgdGhpcy5ydW5Db21wdXRlZCggKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgdGlkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZmV0Y2hTaG9wcGluZyggdGlkICk7XG5cbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWIneasoea4suafk+WujOaIkFxuICAgICAqL1xuICAgIG9uUmVhZHk6IGZ1bmN0aW9uICggKSB7XG5cbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxuICAgICAqL1xuICAgIG9uU2hvdzogZnVuY3Rpb24gKCApIHtcblxuICAgIH0sXG4gIFxuICAgIC8qKlxuICAgICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i6ZqQ6JePXG4gICAgICovXG4gICAgb25IaWRlOiBmdW5jdGlvbiAoKSB7XG4gIFxuICAgIH0sXG4gIFxuICAgIC8qKlxuICAgICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XG4gICAgICovXG4gICAgb25VbmxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgXG4gICAgfSxcbiAgXG4gICAgLyoqXG4gICAgICog6aG16Z2i55u45YWz5LqL5Lu25aSE55CG5Ye95pWwLS3nm5HlkKznlKjmiLfkuIvmi4nliqjkvZxcbiAgICAgKi9cbiAgICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICBcbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDpobXpnaLkuIrmi4nop6blupXkuovku7bnmoTlpITnkIblh73mlbBcbiAgICAgKi9cbiAgICBvblJlYWNoQm90dG9tOiBmdW5jdGlvbiAoKSB7XG4gIFxuICAgIH0sXG4gIFxuICAgIC8qKlxuICAgICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xuICAgICAqL1xuICAgIC8vIG9uU2hhcmVBcHBNZXNzYWdlOiBmdW5jdGlvbiAoIGUgKSB7XG5cbiAgICAvLyB9XG4gIH0pIl19