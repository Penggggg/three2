"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_js_1 = require("../../util/http.js");
var index_js_1 = require("../../lib/vuefy/index.js");
var route_js_1 = require("../../util/route.js");
var app = getApp();
var storageKey = 'trip-has-reward-list';
Page({
    data: {
        tid: '',
        openid: '',
        ipAvatar: '',
        ipName: '',
        isAdm: false,
        isAuth: false,
        loading: true,
        swiperIndex: 0,
        showDanmu: false,
        list: [],
        showHongbao: 'hide',
        hasGet: true
    },
    runComputed: function () {
        index_js_1.computed(this, {
            social$: function () {
                var avatar = 'https://wx.qlogo.cn/mmopen/vi_32/IejMVZTG8WlibHicHIVQhqcNeC4uBxkzH0FFTbRLMicxib8wrxRRWoJY3gvctylATdmAPhiaVicU4sH0NptSszBdyHiaA/132';
                var getRandom = function (n) { return Math.floor(Math.random() * n); };
                var allTexts = [
                    "\u68D2! \u62FC\u56E2\u7684\u7FA4\u53CB\u771F\u7ED9\u529B",
                    "\u54C7! \u548C\u7FA4\u53CB\u62FC\u56E2\u597D\u5212\u7B97",
                    "\u54C8! \u4E0B\u6B21\u7EE7\u7EED\u7528\u7FA4\u62FC\u56E2"
                ];
                var visitors = [
                    avatar,
                    avatar
                ];
                var allVisitors = visitors
                    .map(function (x) {
                    var randomNum = getRandom(allTexts.length);
                    return {
                        avatar: x,
                        text: allTexts[randomNum]
                    };
                });
                return allVisitors;
            },
            others$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var otherList = list
                    .filter(function (x) {
                    return !x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = otherList.map(function (sl) { return _this.transferSl(sl); });
                return r;
            },
            personal$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allTexts = [
                    "\u771F\u7ED9\u529B",
                    "\u8C22\u8C22\u4F60",
                    "\u5212\u7B97\uFF5E",
                    "\u68D2!",
                    "\u8D5E!",
                    "\u8D5A!"
                ];
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = myList.map(function (sl) { return _this.transferSl(sl, allTexts); });
                return r;
            },
            summary$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allSl = list.map(function (sl) { return _this.transferSl(sl); });
                var mySL = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .map(function (sl) { return _this.transferSl(sl); });
                var r = {
                    groupTotalDelta: allSl.reduce(function (x, y) { return x + y.totalDelta; }, 0),
                    myTotalDelta: mySL.reduce(function (x, y) { return x + y.successDelta; }, 0)
                };
                return r;
            },
            hongbao$: function () {
                var _a = this.data, list = _a.list, openid = _a.openid;
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                });
                var hasBuy = myList.length > 0;
                var gift = hasBuy ? 1.24 : 0.88;
                var somePinSuccess = myList.some(function (x) { return x.users.length > 1; });
                var title = hasBuy && somePinSuccess ?
                    '拼团成功' :
                    hasBuy && !somePinSuccess ?
                        '差点拼成' :
                        '群拼团 省钱!';
                var summary = hasBuy && somePinSuccess ?
                    '省钱啦！请再接再厉~' :
                    hasBuy && !somePinSuccess ?
                        '莫灰心！多邀请群友拼团' :
                        '下次跟着群友拼';
                return {
                    gift: gift,
                    title: title,
                    summary: summary
                };
            }
        });
    },
    watchStore: function () {
        var _this = this;
        app.watch$('appConfig', function (val) {
            if (!!val) {
                _this.setTitle((val['ip-name'] || '') + "\u7FA4\u62FC\u56E2");
                _this.setData({
                    ipName: val['ip-name'],
                    ipAvatar: "" + (val['ip-avatar'] || '')
                });
            }
        });
        app.watch$('openid', function (val) {
            !!val && _this.setData({
                openid: val
            });
        });
        app.watch$('isUserAuth', function (val) {
            if (val === undefined) {
                return;
            }
            _this.setData({
                isAuth: val
            });
        });
        app.watch$('role', function (val) {
            if (val === 0) {
                wx.hideShareMenu({});
            }
            else {
                wx.showShareMenu({
                    withShareTicket: false
                });
            }
        });
    },
    fetchShopping: function (tid) {
        var _this = this;
        if (!tid) {
            return;
        }
        http_js_1.http({
            url: 'shopping-list_pin',
            data: {
                tid: tid,
                detail: true,
                showUser: true
            },
            success: function (res) {
                var status = res.status, data = res.data;
                if (status !== 200) {
                    return;
                }
                _this.setData({
                    list: data,
                    loading: false,
                    showHongbao: 'show'
                });
            }
        });
    },
    fetchGetGift: function () {
        var _this = this;
        var _a = this.data, tid = _a.tid, hasGet = _a.hasGet;
        var hongbao$ = this.data.hongbao$;
        if (hasGet) {
            wx.showToast({
                title: '已领取过啦'
            });
            return this.toggleHongbao();
        }
        http_js_1.http({
            url: 'common_get-integral',
            data: {
                integral: hongbao$.gift
            },
            loadingMsg: '领取中...',
            success: function (res) {
                var status = res.status;
                if (status !== 200) {
                    return;
                }
                wx.showToast({
                    title: '领取成功'
                });
                _this.toggleHongbao();
                _this.setTripReward(tid);
                _this.checkIsGet(tid);
            }
        });
    },
    setTitle: function (title) {
        if (!title) {
            return;
        }
        wx.setNavigationBarTitle({
            title: title
        });
    },
    transferSl: function (sl, allTexts) {
        if (allTexts === void 0) { allTexts = []; }
        var pid = sl.pid, adjustGroupPrice = sl.adjustGroupPrice, adjustPrice = sl.adjustPrice, users = sl.users, detail = sl.detail;
        var delta = adjustGroupPrice ? Math.ceil(adjustPrice - adjustGroupPrice) : 0;
        var totalDelta = delta * users.length;
        var getRandom = function (n) { return Math.floor(Math.random() * n); };
        return {
            pid: pid,
            price: adjustPrice,
            groupPrice: adjustGroupPrice,
            fadePrice: detail.good.fadePrice,
            title: detail.title,
            name: detail.name || '',
            goodImg: detail.img,
            delta: delta,
            totalDelta: totalDelta,
            successDelta: users.length > 1 ? delta : 0,
            buyer: users.map(function (x) { return ({
                name: x.nickName,
                avatar: x.avatarUrl
            }); }),
            pinSuccess: users.length > 1,
            tips: allTexts[getRandom(allTexts.length)],
            tipsIndex: getRandom(users.length > 4 ? 3 : users.length - 1) + 1
        };
    },
    toggleHongbao: function () {
        var showHongbao = this.data.showHongbao;
        this.setData({
            showHongbao: showHongbao === 'show' ? 'hide' : 'show'
        });
    },
    goGoodDetail: function (e) {
        var data = e.currentTarget.dataset.data;
        route_js_1.navTo("/pages/goods-detail/index?id=" + data.pid);
    },
    onSubscribe: function () {
        app.getSubscribe('buyPin,waitPin,trip');
        this.fetchGetGift();
    },
    getUserAuth: function () {
        var _this = this;
        app.getWxUserInfo(function () {
            _this.fetchGetGift();
        });
    },
    setTripReward: function (tid) {
        var tripSum = 10;
        var hasRewardList = JSON.parse(wx.getStorageSync(storageKey) || '[ ]');
        hasRewardList.unshift(tid);
        wx.setStorageSync(storageKey, JSON.stringify(hasRewardList.slice(0, tripSum)));
    },
    checkIsGet: function (tid) {
        var hasRewardList = JSON.parse(wx.getStorageSync(storageKey) || '[ ]');
        this.setData({
            hasGet: hasRewardList.includes(tid)
        });
    },
    onSwiper: function (e) {
        var current = e.detail.current;
        this.setData({
            swiperIndex: current
        });
    },
    onScroll: function (e) {
        var showDanmu = this.data.showDanmu;
        var scrollTop = e.detail.scrollTop;
        if (!!showDanmu) {
            return;
        }
        if (scrollTop > 100) {
            this.setData({
                showDanmu: true
            });
        }
    },
    onLoad: function (query) {
        var tid = query.tid || "e8f863ba5de6241400076921441bc8d5";
        this.watchStore();
        this.runComputed();
        this.setData({
            tid: tid
        });
        this.checkIsGet(tid);
        this.fetchShopping(tid);
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function (e) {
        var _a = this.data, ipName = _a.ipName, tid = _a.tid, isAdm = _a.isAdm;
        return {
            title: (ipName || '群拼团') + "\u56DE\u62A5\u5927\u5BB6\u5566 \u70B9\u51FB\u9886\u53D6\u62B5\u73B0\u91D1",
            imageUrl: 'https://global-1257764567.cos.ap-guangzhou.myqcloud.com/bg-trip-reward-share-colorful.jpg',
            path: "/pages/trip-reward/index?tid=" + tid
        };
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDhDQUEwQztBQUMxQyxxREFBb0Q7QUFFcEQsZ0RBQTRDO0FBRTVDLElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBUSxDQUFDO0FBQzNCLElBQU0sVUFBVSxHQUFHLHNCQUFzQixDQUFDO0FBRTFDLElBQUksQ0FBQztJQUVELElBQUksRUFBRTtRQUVGLEdBQUcsRUFBRSxFQUFFO1FBRVAsTUFBTSxFQUFFLEVBQUU7UUFFVixRQUFRLEVBQUUsRUFBRTtRQUVaLE1BQU0sRUFBRSxFQUFFO1FBRVYsS0FBSyxFQUFFLEtBQUs7UUFLWixNQUFNLEVBQUUsS0FBSztRQUtiLE9BQU8sRUFBRSxJQUFJO1FBS2IsV0FBVyxFQUFFLENBQUM7UUFLZCxTQUFTLEVBQUUsS0FBSztRQUtoQixJQUFJLEVBQUUsRUFBRztRQUtULFdBQVcsRUFBRSxNQUFNO1FBS25CLE1BQU0sRUFBRSxJQUFJO0tBRWY7SUFFRCxXQUFXO1FBQ1AsbUJBQVEsQ0FBRSxJQUFJLEVBQUU7WUFHWixPQUFPO2dCQUNILElBQU0sTUFBTSxHQUFHLG9JQUFvSSxDQUFDO2dCQUNwSixJQUFNLFNBQVMsR0FBRyxVQUFBLENBQUMsSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsQ0FBRSxFQUFoQyxDQUFnQyxDQUFDO2dCQUN4RCxJQUFNLFFBQVEsR0FBRztvQkFDYiwwREFBYTtvQkFDYiwwREFBYTtvQkFDYiwwREFBYTtpQkFDaEIsQ0FBQztnQkFFRixJQUFNLFFBQVEsR0FBRztvQkFDYixNQUFNO29CQUNOLE1BQU07aUJBQ1QsQ0FBQztnQkFDRixJQUFNLFdBQVcsR0FBRyxRQUFRO3FCQUN2QixHQUFHLENBQUUsVUFBQSxDQUFDO29CQUNILElBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBRSxRQUFRLENBQUMsTUFBTSxDQUFF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Q0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgaHR0cCB9IGZyb20gJy4uLy4uL3V0aWwvaHR0cC5qcyc7XG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJy4uLy4uL2xpYi92dWVmeS9pbmRleC5qcyc7XG5pbXBvcnQgeyBkZWxheWVyaW5nR29vZCB9IGZyb20gJy4uLy4uL3V0aWwvZ29vZHMuanMnO1xuaW1wb3J0IHsgbmF2VG8gfSBmcm9tICcuLi8uLi91dGlsL3JvdXRlLmpzJztcblxuY29uc3QgYXBwID0gZ2V0QXBwPGFueT4oICk7XG5jb25zdCBzdG9yYWdlS2V5ID0gJ3RyaXAtaGFzLXJld2FyZC1saXN0JztcblxuUGFnZSh7XG5cbiAgICBkYXRhOiB7XG5cbiAgICAgICAgdGlkOiAnJyxcblxuICAgICAgICBvcGVuaWQ6ICcnLFxuXG4gICAgICAgIGlwQXZhdGFyOiAnJyxcblxuICAgICAgICBpcE5hbWU6ICcnLFxuXG4gICAgICAgIGlzQWRtOiBmYWxzZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5pyJ55So5oi35o6I5p2DXG4gICAgICAgICAqL1xuICAgICAgICBpc0F1dGg6IGZhbHNlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDliqDovb1cbiAgICAgICAgICovXG4gICAgICAgIGxvYWRpbmc6IHRydWUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWFtuS7luS6uua4heWNleeahCBzd2lwZXJcbiAgICAgICAgICovXG4gICAgICAgIHN3aXBlckluZGV4OiAwLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmmK/lkKblsZXnpLrlvLnluZVcbiAgICAgICAgICovXG4gICAgICAgIHNob3dEYW5tdTogZmFsc2UsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOi0reeJqea4heWNlVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdDogWyBdLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDlsZXnpLrnuqLljIVcbiAgICAgICAgICovXG4gICAgICAgIHNob3dIb25nYmFvOiAnaGlkZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuW3sue7j+mihuWPlui/h+e6ouWMheS6hlxuICAgICAgICAgKi9cbiAgICAgICAgaGFzR2V0OiB0cnVlXG5cbiAgICB9LFxuXG4gICAgcnVuQ29tcHV0ZWQoICkge1xuICAgICAgICBjb21wdXRlZCggdGhpcywge1xuXG4gICAgICAgICAgICAvLyDotK3kubDorrDlvZUgKyDnpL7kuqTlsZ7mgKfmqKHlnZdcbiAgICAgICAgICAgIHNvY2lhbCQoICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2YXRhciA9ICdodHRwczovL3d4LnFsb2dvLmNuL21tb3Blbi92aV8zMi9JZWpNVlpURzhXbGliSGljSElWUWhxY05lQzR1QnhrekgwRkZUYlJMTWljeGliOHdyeFJSV29KWTNndmN0eWxBVGRtQVBoaWFWaWNVNHNIME5wdFNzekJkeUhpYUEvMTMyJztcbiAgICAgICAgICAgICAgICBjb25zdCBnZXRSYW5kb20gPSBuID0+IE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCApICogbiApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFRleHRzID0gW1xuICAgICAgICAgICAgICAgICAgICBg5qOSISDmi7zlm6LnmoTnvqTlj4vnnJ/nu5nliptgLFxuICAgICAgICAgICAgICAgICAgICBg5ZOHISDlkoznvqTlj4vmi7zlm6Llpb3liJLnrpdgLFxuICAgICAgICAgICAgICAgICAgICBg5ZOIISDkuIvmrKHnu6fnu63nlKjnvqTmi7zlm6JgXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCB2aXNpdG9ycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyLFxuICAgICAgICAgICAgICAgICAgICBhdmF0YXJcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFZpc2l0b3JzID0gdmlzaXRvcnNcbiAgICAgICAgICAgICAgICAgICAgLm1hcCggeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5kb21OdW0gPSBnZXRSYW5kb20oIGFsbFRleHRzLmxlbmd0aCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmF0YXI6IHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogYWxsVGV4dHNbIHJhbmRvbU51bSBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFZpc2l0b3JzO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyDlhbbku5bkuroo5oiW6ICF5piv5omA5pyJ5Lq655qEKeeahOi0reeJqea4heWNlVxuICAgICAgICAgICAgb3RoZXJzJCggKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsaXN0LCBvcGVuaWQgfSA9IHRoaXMuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlckxpc3QgPSBsaXN0XG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoIHggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF4LnVzZXJzLmZpbmQoIHkgPT4geS5vcGVuaWQgPT09IG9wZW5pZCApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc29ydCgoIHgsIHkgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geS51c2Vycy5sZW5ndGggLSB4LnVzZXJzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvdGhlckxpc3QubWFwKCBzbCA9PiB0aGlzLnRyYW5zZmVyU2woIHNsICkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8g5Liq5Lq66LSt54mp5riF5Y2VXG4gICAgICAgICAgICBwZXJzb25hbCQoICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGlzdCwgb3BlbmlkIH0gPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgYWxsVGV4dHMgPSBbXG4gICAgICAgICAgICAgICAgICAgIGDnnJ/nu5nliptgLFxuICAgICAgICAgICAgICAgICAgICBg6LCi6LCi5L2gYCxcbiAgICAgICAgICAgICAgICAgICAgYOWIkueul++9nmAsXG4gICAgICAgICAgICAgICAgICAgIGDmo5IhYCxcbiAgICAgICAgICAgICAgICAgICAgYOi1niFgLFxuICAgICAgICAgICAgICAgICAgICBg6LWaIWBcbiAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbXlMaXN0ID0gbGlzdFxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCB4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4LnVzZXJzLmZpbmQoIHkgPT4geS5vcGVuaWQgPT09IG9wZW5pZCApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc29ydCgoIHgsIHkgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geS51c2Vycy5sZW5ndGggLSB4LnVzZXJzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBteUxpc3QubWFwKCBzbCA9PiB0aGlzLnRyYW5zZmVyU2woIHNsLCBhbGxUZXh0cyApKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIOihjOeoi+a4heWNleaAu+amguWGtVxuICAgICAgICAgICAgc3VtbWFyeSQoICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGlzdCwgb3BlbmlkIH0gPSB0aGlzLmRhdGE7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBhbGxTbCA9IGxpc3QubWFwKCBzbCA9PiB0aGlzLnRyYW5zZmVyU2woIHNsICkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG15U0wgPSBsaXN0XG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoIHggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudXNlcnMuZmluZCggeSA9PiB5Lm9wZW5pZCA9PT0gb3BlbmlkICk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoIHNsID0+IHRoaXMudHJhbnNmZXJTbCggc2wgKSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyDmiYDmnInnvqTlj4vvvIzkuIDlhbHnnIHkuoblpJrlsJFcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBUb3RhbERlbHRhOiBhbGxTbC5yZWR1Y2UoKCB4LCB5ICkgPT4geCArIHkudG90YWxEZWx0YSwgMCApLFxuICAgICAgICAgICAgICAgICAgICAvLyDmiJHkuIDlhbHnnIHkuoblpJrlsJFcbiAgICAgICAgICAgICAgICAgICAgbXlUb3RhbERlbHRhOiBteVNMLnJlZHVjZSgoIHgsIHkgKSA9PiB4ICsgeS5zdWNjZXNzRGVsdGEsIDAgKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyDmirXnjrDph5HnmoTlpZblirHph5Hpop1cbiAgICAgICAgICAgIGhvbmdiYW8kKCApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxpc3QsIG9wZW5pZCB9ID0gdGhpcy5kYXRhO1xuXG4gICAgICAgICAgICAgICAgLy8g5oiR55qE6LSt54mp5riF5Y2VXG4gICAgICAgICAgICAgICAgY29uc3QgbXlMaXN0ID0gbGlzdFxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCB4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4LnVzZXJzLmZpbmQoIHkgPT4geS5vcGVuaWQgPT09IG9wZW5pZCApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIOaYr+WQpuacieS5sOi/h+S4nOilv1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0J1eSA9IG15TGlzdC5sZW5ndGggPiAwO1xuXG4gICAgICAgICAgICAgICAgLy8g5aWW5Yqx6YeR6aKdXG4gICAgICAgICAgICAgICAgY29uc3QgZ2lmdCA9IGhhc0J1eSA/IDEuMjQgOiAwLjg4O1xuXG4gICAgICAgICAgICAgICAgLy8g5piv5ZCm5pyJ5ou85Zui5oiQ5YqfXG4gICAgICAgICAgICAgICAgY29uc3Qgc29tZVBpblN1Y2Nlc3MgPSBteUxpc3Quc29tZSggeCA9PiB4LnVzZXJzLmxlbmd0aCA+IDEgKTtcblxuICAgICAgICAgICAgICAgIC8vIOaWh+ahiDFcbiAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGhhc0J1eSAmJiBzb21lUGluU3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICfmi7zlm6LmiJDlip8nIDpcbiAgICAgICAgICAgICAgICAgICAgaGFzQnV5ICYmICFzb21lUGluU3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAn5beu54K55ou85oiQJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAn576k5ou85ZuiIOecgemSsSEnO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIOaWh+WuiTJcbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5ID0gaGFzQnV5ICYmIHNvbWVQaW5TdWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgJ+ecgemSseWVpu+8geivt+WGjeaOpeWGjeWOiX4nIDpcbiAgICAgICAgICAgICAgICAgICAgaGFzQnV5ICYmICFzb21lUGluU3VjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAn6I6r54Gw5b+D77yB5aSa6YKA6K+3576k5Y+L5ou85ZuiJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAn5LiL5qyh6Lef552A576k5Y+L5ou8JztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGdpZnQsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDnm5HlkKxzdG9yZVxuICAgICAqL1xuICAgIHdhdGNoU3RvcmUoICkge1xuICAgICAgICBhcHAud2F0Y2gkKCdhcHBDb25maWcnLCB2YWwgPT4ge1xuICAgICAgICAgICAgaWYgKCAhIXZhbCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRpdGxlKGAke3ZhbFsnaXAtbmFtZSddIHx8ICcnfee+pOaLvOWbomApXG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICAgICAgICAgIGlwTmFtZTogdmFsWydpcC1uYW1lJ10sXG4gICAgICAgICAgICAgICAgICAgIGlwQXZhdGFyOiBgJHt2YWxbJ2lwLWF2YXRhciddIHx8ICcnfWBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXBwLndhdGNoJCgnb3BlbmlkJywgdmFsID0+IHtcbiAgICAgICAgICAgICEhdmFsICYmIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgIG9wZW5pZDogdmFsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgYXBwLndhdGNoJCgnaXNVc2VyQXV0aCcsIHZhbCA9PiB7XG4gICAgICAgICAgICBpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgIGlzQXV0aDogdmFsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFwcC53YXRjaCQoJ3JvbGUnLCB2YWwgPT4ge1xuICAgICAgICAgICAgaWYgKCB2YWwgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgd3guaGlkZVNoYXJlTWVudSh7IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3eC5zaG93U2hhcmVNZW51KHtcbiAgICAgICAgICAgICAgICAgICAgd2l0aFNoYXJlVGlja2V0OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIFxuICAgICAqIOaLieWPluihjOeoi+eahOi0reeJqeivt+WNleS/oeaBr1xuICAgICAqL1xuICAgIGZldGNoU2hvcHBpbmcoIHRpZCApIHtcbiAgICAgICAgaWYgKCAhdGlkICkgeyByZXR1cm47IH1cblxuICAgICAgICBodHRwKHtcbiAgICAgICAgICAgIHVybDogJ3Nob3BwaW5nLWxpc3RfcGluJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0aWQsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dVc2VyOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHN0YXR1cywgZGF0YSB9ID0gcmVzO1xuICAgICAgICAgICAgICAgIGlmICggc3RhdHVzICE9PSAyMDAgKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgICAgICBsaXN0OiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd0hvbmdiYW86ICdzaG93J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDpooblj5bnuqLljIVcbiAgICAgKi9cbiAgICBmZXRjaEdldEdpZnQoICkge1xuICAgICAgICBjb25zdCB7IHRpZCwgaGFzR2V0IH0gPSB0aGlzLmRhdGE7XG4gICAgICAgIGNvbnN0IGhvbmdiYW8kID0gKHRoaXMgYXMgYW55KS5kYXRhLmhvbmdiYW8kO1xuXG4gICAgICAgIGlmICggaGFzR2V0ICkge1xuICAgICAgICAgICAgd3guc2hvd1RvYXN0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+W3sumihuWPlui/h+WVpidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlSG9uZ2JhbyggKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGh0dHAoe1xuICAgICAgICAgICAgdXJsOiAnY29tbW9uX2dldC1pbnRlZ3JhbCcsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgaW50ZWdyYWw6IGhvbmdiYW8kLmdpZnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2FkaW5nTXNnOiAn6aKG5Y+W5LitLi4uJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHJlcztcbiAgICAgICAgICAgICAgICBpZiAoIHN0YXR1cyAhPT0gMjAwICkgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6aKG5Y+W5oiQ5YqfJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVIb25nYmFvKCApO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJpcFJld2FyZCggdGlkICk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0lzR2V0KCB0aWQgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiBcbiAgICAgKiDorr7nva7moIfpophcbiAgICAgKi9cbiAgICBzZXRUaXRsZSggdGl0bGU6IHN0cmluZyApIHtcbiAgICAgICAgaWYgKCAhdGl0bGUgKSB7IHJldHVybjsgfVxuICAgICAgICB3eC5zZXROYXZpZ2F0aW9uQmFyVGl0bGUoe1xuICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOi9rOaNouagvOW8j1xuICAgICAqL1xuICAgIHRyYW5zZmVyU2woIHNsLCBhbGxUZXh0cyA9IFsgXSkge1xuXG4gICAgICAgIGNvbnN0IHsgcGlkLCBhZGp1c3RHcm91cFByaWNlLCBhZGp1c3RQcmljZSwgdXNlcnMsIGRldGFpbCB9ID0gc2w7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gYWRqdXN0R3JvdXBQcmljZSA/IE1hdGguY2VpbCggYWRqdXN0UHJpY2UgLSBhZGp1c3RHcm91cFByaWNlICkgOiAwO1xuICAgICAgICBjb25zdCB0b3RhbERlbHRhID0gZGVsdGEgKiB1c2Vycy5sZW5ndGg7XG5cbiAgICAgICAgY29uc3QgZ2V0UmFuZG9tID0gbiA9PiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSggKSAqIG4gKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGlkLFxuICAgICAgICAgICAgcHJpY2U6IGFkanVzdFByaWNlLFxuICAgICAgICAgICAgZ3JvdXBQcmljZTogYWRqdXN0R3JvdXBQcmljZSxcbiAgICAgICAgICAgIGZhZGVQcmljZTogZGV0YWlsLmdvb2QuZmFkZVByaWNlLFxuICAgICAgICAgICAgdGl0bGU6IGRldGFpbC50aXRsZSxcbiAgICAgICAgICAgIG5hbWU6IGRldGFpbC5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgZ29vZEltZzogZGV0YWlsLmltZyxcbiAgICAgICAgICAgIC8vIOaAu+W3ruWAvFxuICAgICAgICAgICAgZGVsdGEsIFxuICAgICAgICAgICAgLy8g6LSt54mp5riF5Y2V5oC75beu5YC8XG4gICAgICAgICAgICB0b3RhbERlbHRhLFxuICAgICAgICAgICAgLy8g5oiR55qE5oiQ5Yqf5ou85Zui5beu5YC8XG4gICAgICAgICAgICBzdWNjZXNzRGVsdGE6IHVzZXJzLmxlbmd0aCA+IDEgPyBkZWx0YSA6IDAsXG4gICAgICAgICAgICBidXllcjogdXNlcnMubWFwKCB4ID0+ICh7XG4gICAgICAgICAgICAgICAgbmFtZTogeC5uaWNrTmFtZSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IHguYXZhdGFyVXJsXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBwaW5TdWNjZXNzOiB1c2Vycy5sZW5ndGggPiAxLFxuICAgICAgICAgICAgdGlwczogYWxsVGV4dHNbIGdldFJhbmRvbSggYWxsVGV4dHMubGVuZ3RoICldLFxuICAgICAgICAgICAgdGlwc0luZGV4OiBnZXRSYW5kb20oIHVzZXJzLmxlbmd0aCA+IDQgPyAzIDogdXNlcnMubGVuZ3RoIC0gMSApICsgMVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOW8gOWFs+e6ouWMhVxuICAgICAqL1xuICAgIHRvZ2dsZUhvbmdiYW8oICkge1xuICAgICAgICBjb25zdCB7IHNob3dIb25nYmFvIH0gPSB0aGlzLmRhdGE7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgc2hvd0hvbmdiYW86IHNob3dIb25nYmFvID09PSAnc2hvdycgPyAnaGlkZScgOiAnc2hvdydcbiAgICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog6Lez5Yiw5ZWG5ZOB6K+m5oOFXG4gICAgICovXG4gICAgZ29Hb29kRGV0YWlsKCBlICkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0O1xuICAgICAgICBuYXZUbyhgL3BhZ2VzL2dvb2RzLWRldGFpbC9pbmRleD9pZD0ke2RhdGEucGlkfWApXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOiuoumYhVxuICAgICAqL1xuICAgIG9uU3Vic2NyaWJlKCApIHtcbiAgICAgICAgYXBwLmdldFN1YnNjcmliZSgnYnV5UGluLHdhaXRQaW4sdHJpcCcpO1xuICAgICAgICB0aGlzLmZldGNoR2V0R2lmdCggKTtcbiAgICB9LFxuXG4gICAgLyoqIFxuICAgICAqIOiOt+WPlueUqOaIt+aOiOadg1xuICAgICAqL1xuICAgIGdldFVzZXJBdXRoKCApIHtcbiAgICAgICAgYXBwLmdldFd4VXNlckluZm8oKCApID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hHZXRHaWZ0KCApO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog6K6+572u5bey6aKG5Y+W57qi5YyFXG4gICAgICog5LuF5L+d55WZMTDkuKrooYznqItpZFxuICAgICAqL1xuICAgIHNldFRyaXBSZXdhcmQoIHRpZCApIHtcbiAgICAgICAgY29uc3QgdHJpcFN1bSA9IDEwO1xuICAgICAgICBjb25zdCBoYXNSZXdhcmRMaXN0ID0gSlNPTi5wYXJzZSggd3guZ2V0U3RvcmFnZVN5bmMoIHN0b3JhZ2VLZXkgKSB8fCAnWyBdJyk7XG4gICAgICAgIGhhc1Jld2FyZExpc3QudW5zaGlmdCggdGlkICk7XG4gICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCBzdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeSggaGFzUmV3YXJkTGlzdC5zbGljZSggMCwgdHJpcFN1bSApKSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5qOA5p+l6K+l6Laf6KGM56iL6YeM6Z2iXG4gICAgICog5piv5ZCm5bey57uP6aKG5Y+W6L+H57qi5YyFXG4gICAgICovXG4gICAgY2hlY2tJc0dldCggdGlkICkge1xuICAgICAgICBjb25zdCBoYXNSZXdhcmRMaXN0ID0gSlNPTi5wYXJzZSggd3guZ2V0U3RvcmFnZVN5bmMoIHN0b3JhZ2VLZXkgKSB8fCAnWyBdJyk7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgaGFzR2V0OiBoYXNSZXdhcmRMaXN0LmluY2x1ZGVzKCB0aWQgKVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3dpcGVy55uR5ZCsXG4gICAgICovXG4gICAgb25Td2lwZXIoIGU6IGFueSApIHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50IH0gPSBlLmRldGFpbDtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICBzd2lwZXJJbmRleDogY3VycmVudFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog6aG16Z2i5rua5YqoXG4gICAgICovXG4gICAgb25TY3JvbGwoIGU6IGFueSApIHtcbiAgICAgICAgY29uc3QgeyBzaG93RGFubXUgfSA9IHRoaXMuZGF0YTtcbiAgICAgICAgY29uc3QgeyBzY3JvbGxUb3AgfSA9IGUuZGV0YWlsO1xuICAgICAgICBpZiAoICEhc2hvd0Rhbm11ICkgeyByZXR1cm47IH0gXG5cbiAgICAgICAgaWYgKCBzY3JvbGxUb3AgPiAxMDAgKSB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgICAgICBzaG93RGFubXU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRpZCDooYznqItpZFxuICAgICAqL1xuICAgIG9uTG9hZDogZnVuY3Rpb24gKCBxdWVyeTogYW55ICkge1xuICAgICAgICBjb25zdCB0aWQgPSBxdWVyeS50aWQgfHwgXCJlOGY4NjNiYTVkZTYyNDE0MDAwNzY5MjE0NDFiYzhkNVwiO1xuICAgICAgICB0aGlzLndhdGNoU3RvcmUoICk7XG4gICAgICAgIHRoaXMucnVuQ29tcHV0ZWQoICk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgICAgIHRpZFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNoZWNrSXNHZXQoIHRpZCApO1xuICAgICAgICB0aGlzLmZldGNoU2hvcHBpbmcoIHRpZCApO1xuXG4gICAgfSxcbiAgXG4gICAgLyoqXG4gICAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcbiAgICAgKi9cbiAgICBvblJlYWR5OiBmdW5jdGlvbiAoICkge1xuXG4gICAgfSxcbiAgXG4gICAgLyoqXG4gICAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLmmL7npLpcbiAgICAgKi9cbiAgICBvblNob3c6IGZ1bmN0aW9uICggKSB7XG5cbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdoumakOiXj1xuICAgICAqL1xuICAgIG9uSGlkZTogZnVuY3Rpb24gKCkge1xuICBcbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWNuOi9vVxuICAgICAqL1xuICAgIG9uVW5sb2FkOiBmdW5jdGlvbiAoKSB7XG4gIFxuICAgIH0sXG4gIFxuICAgIC8qKlxuICAgICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXG4gICAgICovXG4gICAgb25QdWxsRG93blJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgXG4gICAgfSxcbiAgXG4gICAgLyoqXG4gICAgICog6aG16Z2i5LiK5ouJ6Kem5bqV5LqL5Lu255qE5aSE55CG5Ye95pWwXG4gICAgICovXG4gICAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuICBcbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnlKjmiLfngrnlh7vlj7PkuIrop5LliIbkuqtcbiAgICAgKi9cbiAgICBvblNoYXJlQXBwTWVzc2FnZTogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICBjb25zdCB7IGlwTmFtZSwgdGlkLCBpc0FkbSB9ID0gdGhpcy5kYXRhO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6IGAke2lwTmFtZSB8fCAn576k5ou85ZuiJ33lm57miqXlpKflrrbllaYg54K55Ye76aKG5Y+W5oq1546w6YeRYCxcbiAgICAgICAgICAgIGltYWdlVXJsOiAnaHR0cHM6Ly9nbG9iYWwtMTI1Nzc2NDU2Ny5jb3MuYXAtZ3Vhbmd6aG91Lm15cWNsb3VkLmNvbS9iZy10cmlwLXJld2FyZC1zaGFyZS1jb2xvcmZ1bC5qcGcnLFxuICAgICAgICAgICAgcGF0aDogYC9wYWdlcy90cmlwLXJld2FyZC9pbmRleD90aWQ9JHt0aWR9YFxuICAgICAgICB9O1xuICAgIH1cbiAgfSkiXX0=