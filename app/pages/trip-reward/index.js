"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_js_1 = require("../../util/http.js");
var index_js_1 = require("../../lib/vuefy/index.js");
var app = getApp();
Page({
    data: {
        tid: '',
        openid: '',
        ipAvatar: '',
        loading: true,
        swiperIndex: 0,
        showDanmu: false,
        list: []
    },
    runComputed: function () {
        index_js_1.computed(this, {
            social$: function () {
                var avatar = 'https://wx.qlogo.cn/mmopen/vi_32/IejMVZTG8WlibHicHIVQhqcNeC4uBxkzH0FFTbRLMicxib8wrxRRWoJY3gvctylATdmAPhiaVicU4sH0NptSszBdyHiaA/132';
                var getRandom = function (n) { return Math.floor(Math.random() * n); };
                var allTexts = [
                    "\u68D2! \u62FC\u56E2\u7684\u7FA4\u53CB\u771F\u7ED9\u529B",
                    "\u54C7! \u548C\u7FA4\u53CB\u62FC\u56E2\u597D\u5212\u7B97",
                    "\u54C8! \u4E0B\u6B21\u7EE7\u7EED\u7528\u7FA4\u62FC\u56E2"
                ];
                var visitors = [
                    avatar,
                    avatar
                ];
                var allVisitors = visitors
                    .map(function (x) {
                    var randomNum = getRandom(allTexts.length);
                    return {
                        avatar: x,
                        text: allTexts[randomNum]
                    };
                });
                return allVisitors;
            },
            others$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var otherList = list
                    .filter(function (x) {
                    return !x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = otherList.map(function (sl) { return _this.transferSl(sl); });
                return r;
            },
            personal$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allTexts = [
                    "\u771F\u7ED9\u529B",
                    "\u8C22\u8C22\u4F60",
                    "\u5212\u7B97\uFF5E",
                    "\u68D2!",
                    "\u8D5E!",
                    "\u8D5A!"
                ];
                var myList = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .sort(function (x, y) {
                    return y.users.length - x.users.length;
                });
                var r = myList.map(function (sl) { return _this.transferSl(sl, allTexts); });
                return r;
            },
            summary$: function () {
                var _this = this;
                var _a = this.data, list = _a.list, openid = _a.openid;
                var allSl = list.map(function (sl) { return _this.transferSl(sl); });
                var mySL = list
                    .filter(function (x) {
                    return x.users.find(function (y) { return y.openid === openid; });
                })
                    .map(function (sl) { return _this.transferSl(sl); });
                var r = {
                    groupTotalDelta: allSl.reduce(function (x, y) { return x + y.totalDelta; }, 0),
                    myTotalDelta: mySL.reduce(function (x, y) { return x + y.successDelta; }, 0)
                };
                return r;
            }
        });
    },
    watchStore: function () {
        var _this = this;
        app.watch$('appConfig', function (val) {
            if (!!val) {
                _this.setTitle((val['ip-name'] || '') + "\u7FA4\u62FC\u56E2");
                _this.setData({
                    ipAvatar: "" + (val['ip-avatar'] || '')
                });
            }
        });
        app.watch$('openid', function (val) {
            !!val && _this.setData({
                openid: val
            });
        });
    },
    fetchShopping: function (tid) {
        var _this = this;
        if (!tid) {
            return;
        }
        http_js_1.http({
            url: 'shopping-list_pin',
            data: {
                tid: tid,
                detail: true,
                showUser: true
            },
            success: function (res) {
                var status = res.status, data = res.data;
                if (status !== 200) {
                    return;
                }
                _this.setData({
                    list: data,
                    loading: false
                });
            }
        });
    },
    setTitle: function (title) {
        if (!title) {
            return;
        }
        wx.setNavigationBarTitle({
            title: title
        });
    },
    transferSl: function (sl, allTexts) {
        if (allTexts === void 0) { allTexts = []; }
        var pid = sl.pid, adjustGroupPrice = sl.adjustGroupPrice, adjustPrice = sl.adjustPrice, users = sl.users, detail = sl.detail;
        var delta = adjustGroupPrice ? Math.ceil(adjustPrice - adjustGroupPrice) : 0;
        var totalDelta = delta * users.length;
        var getRandom = function (n) { return Math.floor(Math.random() * n); };
        return {
            pid: pid,
            price: adjustPrice,
            groupPrice: adjustGroupPrice,
            fadePrice: detail.good.fadePrice,
            title: detail.title,
            name: detail.name || '',
            goodImg: detail.img,
            delta: delta,
            totalDelta: totalDelta,
            successDelta: users.length > 1 ? delta : 0,
            buyer: users.map(function (x) { return ({
                name: x.nickName,
                avatar: x.avatarUrl
            }); }),
            pinSuccess: users.length > 1,
            tips: allTexts[getRandom(allTexts.length)],
            tipsIndex: getRandom(users.length > 4 ? 3 : users.length - 1) + 1
        };
    },
    onSwiper: function (e) {
        var current = e.detail.current;
        this.setData({
            swiperIndex: current
        });
    },
    onScroll: function (e) {
        var showDanmu = this.data.showDanmu;
        var scrollTop = e.detail.scrollTop;
        if (!!showDanmu) {
            return;
        }
        if (scrollTop > 100) {
            this.setData({
                showDanmu: true
            });
        }
    },
    onLoad: function (query) {
        var tid = query.tid || "e8f863ba5de6241400076921441bc8d5";
        this.watchStore();
        this.runComputed();
        this.setData({
            tid: tid
        });
        this.fetchShopping(tid);
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
});
//# sourceMappingURL=data:application/json;base64,