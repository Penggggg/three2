"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pushIntegralRate = 0.05;
var delayeringGood = function (x, pushIntegralRate) {
    if (pushIntegralRate === void 0) { pushIntegralRate = 0.05; }
    if (!x) {
        return null;
    }
    var allPriceArr = [];
    var allStockArr = [];
    var decorateItem = function (good) {
        allPriceArr.push(good.price);
        if (good.stock) {
            allStockArr.push(good.stock);
        }
        if (good.groupPrice) {
            allPriceArr.push(good.groupPrice);
        }
    };
    var decorateItem2 = function (activities) {
        if (Array.isArray(activities)) {
            activities.map(function (ac) {
                allPriceArr.push(ac.ac_price);
                if (ac.ac_groupPrice) {
                    allPriceArr.push(ac.ac_groupPrice);
                }
            });
        }
    };
    decorateItem2(x.activities);
    if (!x.standards || x.standards.length === 0) {
        decorateItem(x);
    }
    else {
        x.standards.map(decorateItem);
    }
    allPriceArr = allPriceArr.sort(function (x, y) { return x - y; });
    allStockArr = allStockArr.sort(function (x, y) { return x - y; });
    return Object.assign({}, x, {
        pid: x._id,
        hasPin: hasPin(x),
        stock$: allStockArr.length === 0 ?
            allStockArr[0] :
            allStockArr[0] === allStockArr[allStockArr.length - 1] ?
                allStockArr[0] :
                allStockArr[0] + " ~ " + allStockArr[allStockArr.length - 1],
        price$: allPriceArr.length === 0 ?
            allPriceArr[0] :
            allPriceArr[0] === allPriceArr[allPriceArr.length - 1] ?
                allPriceArr[0] :
                allPriceArr[0] + " ~ " + allPriceArr[allPriceArr.length - 1],
        integral$: allPriceArr.length === 0 ?
            (allPriceArr[0] * pushIntegralRate).toFixed(1) :
            allPriceArr[0] === allPriceArr[allPriceArr.length - 1] ?
                (allPriceArr[0] * pushIntegralRate).toFixed(1) :
                (allPriceArr[0] * pushIntegralRate).toFixed(1) + " ~ " + (allPriceArr[allPriceArr.length - 1] * pushIntegralRate).toFixed(1),
        priceGap: allPriceArr.length === 0 ?
            0 :
            "" + (allPriceArr[allPriceArr.length - 1] - allPriceArr[0]),
        lowest_price$: allPriceArr[0],
        hasActivity: !!x.activity || (Array.isArray(x.activities) && x.activities.length > 0),
        goodPins: dealGoodPin(x),
        tagText: x.tag.join('„ÄÅ'),
        outStock: allStockArr.some(function (x) { return x < 10; })
    });
};
exports.delayeringGood = delayeringGood;
var hasPin = function (good) {
    var activities = good.activities, standards = good.standards, groupPrice = good.groupPrice;
    var piningStandards = standards.filter(function (x) { return !!x.groupPrice; });
    var piningActivies = !!activities ? activities.filter(function (x) { return !!x.ac_groupPrice; }) : [];
    return !!groupPrice || piningStandards.length > 0 || piningActivies.length > 0;
};
var dealGoodPin = function (good) {
    var activities = good.activities, standards = good.standards, price = good.price, groupPrice = good.groupPrice;
    if (!standards || standards.length === 0) {
        var acTarget = !activities ?
            null :
            activities.find(function (ac) { return ac.pid === good.pid; });
        var p = acTarget ? acTarget.ac_price : price;
        var gp = acTarget ? acTarget.ac_groupPrice : groupPrice;
        return {
            list: [{
                    price: p,
                    groupPrice: gp
                }],
            eachPriceRound: gp ? (p - gp).toFixed(2) : 0
        };
    }
    else {
        var meta = standards.map(function (standard) {
            var acTarget = !activities ?
                null :
                activities.find(function (ac) { return ac.pid === standard.pid && ac.sid === standard._id; });
            if ((!!acTarget && !!acTarget.ac_groupPrice) || standard.groupPrice) {
                if (acTarget) {
                    return {
                        price: acTarget.ac_price,
                        groupPrice: acTarget.ac_groupPrice
                    };
                }
                else {
                    return {
                        price: standard.price,
                        groupPrice: standard.groupPrice
                    };
                }
            }
            return null;
        }).filter(function (x) { return !!x; });
        var deltas = meta.map(function (x) {
            return (x.price - (x.groupPrice || 0)).toFixed(2);
        }).sort(function (x, y) { return y - x; });
        return {
            list: meta,
            eachPriceRound: deltas[deltas.length - 1] !== deltas[0] ?
                deltas[deltas.length - 1] + " ~ " + deltas[0] :
                deltas[0]
        };
    }
};
//# sourceMappingURL=data:application/json;base64,