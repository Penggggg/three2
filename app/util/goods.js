"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var delayeringGood = function (x) {
    if (!x) {
        return null;
    }
    var allPriceArr = [];
    var allStockArr = [];
    var decorateItem = function (good) {
        allPriceArr.push(good.price);
        if (good.stock) {
            allStockArr.push(good.stock);
        }
        if (good.groupPrice) {
            allPriceArr.push(good.groupPrice);
        }
    };
    var decorateItem2 = function (activities) {
        if (Array.isArray(activities)) {
            activities.map(function (ac) {
                allPriceArr.push(ac.ac_price);
                if (ac.ac_groupPrice) {
                    allPriceArr.push(ac.ac_groupPrice);
                }
            });
        }
    };
    decorateItem2(x.activities);
    if (x.standards.length === 0) {
        decorateItem(x);
    }
    else {
        x.standards.map(decorateItem);
    }
    allPriceArr = allPriceArr.sort(function (x, y) { return x - y; });
    allStockArr = allStockArr.sort(function (x, y) { return x - y; });
    return Object.assign({}, x, {
        pid: x._id,
        stock$: allStockArr.length === 0 ?
            allStockArr[0] :
            allStockArr[0] + " ~ " + allStockArr[allStockArr.length - 1],
        price$: allPriceArr.length === 0 ?
            allPriceArr[0] :
            allPriceArr[0] + " ~ " + allPriceArr[allPriceArr.length - 1],
        priceGap: allPriceArr.length === 0 ?
            0 :
            "" + (allPriceArr[allPriceArr.length - 1] - allPriceArr[0]),
        lowest_price$: allPriceArr[0],
        hasActivity: Array.isArray(x.activities) && x.activities.length > 0,
    });
};
exports.delayeringGood = delayeringGood;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnb29kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLElBQU0sY0FBYyxHQUFHLFVBQUEsQ0FBQztJQUVwQixJQUFLLENBQUMsQ0FBQyxFQUFHO1FBQ04sT0FBTyxJQUFJLENBQUE7S0FDZDtJQUdELElBQUksV0FBVyxHQUFXLEVBQUcsQ0FBQztJQUc5QixJQUFJLFdBQVcsR0FBWSxFQUFHLENBQUM7SUFHL0IsSUFBTSxZQUFZLEdBQUcsVUFBQSxJQUFJO1FBRXJCLFdBQVcsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDO1FBRS9CLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLFdBQVcsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDO1NBQ2xDO1FBRUQsSUFBSyxJQUFJLENBQUMsVUFBVSxFQUFHO1lBQ25CLFdBQVcsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDO1NBQ3ZDO0lBRUwsQ0FBQyxDQUFDO0lBRUYsSUFBTSxhQUFhLEdBQUcsVUFBQSxVQUFVO1FBQzVCLElBQUssS0FBSyxDQUFDLE9BQU8sQ0FBRSxVQUFVLENBQUUsRUFBRTtZQUM5QixVQUFVLENBQUMsR0FBRyxDQUFFLFVBQUEsRUFBRTtnQkFDZCxXQUFXLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUUsQ0FBQztnQkFFaEMsSUFBSyxFQUFFLENBQUMsYUFBYSxFQUFHO29CQUNwQixXQUFXLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUUsQ0FBQztpQkFDeEM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQyxDQUFBO0lBR0QsYUFBYSxDQUFFLENBQUMsQ0FBQyxVQUFVLENBQUUsQ0FBQztJQUc5QixJQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRztRQUM1QixZQUFZLENBQUUsQ0FBQyxDQUFFLENBQUM7S0FHckI7U0FBTTtRQUNILENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFFLFlBQVksQ0FBRSxDQUFDO0tBQ25DO0lBR0QsV0FBVyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFNLE9BQUEsQ0FBQyxHQUFHLENBQUMsRUFBTCxDQUFLLENBQUUsQ0FBQztJQUNuRCxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFFLENBQUMsRUFBRSxDQUFDLElBQU0sT0FBQSxDQUFDLEdBQUcsQ0FBQyxFQUFMLENBQUssQ0FBRSxDQUFDO0lBRW5ELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ3pCLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRztRQUVWLE1BQU0sRUFBRSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzlCLFdBQVcsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFDO1lBQ2YsV0FBVyxDQUFFLENBQUMsQ0FBRSxXQUFNLFdBQVcsQ0FBRSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBSTtRQUVwRSxNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM5QixXQUFXLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQztZQUNmLFdBQVcsQ0FBRSxDQUFDLENBQUUsV0FBTSxXQUFXLENBQUUsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUk7UUFFcEUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFHLFdBQVcsQ0FBRSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxHQUFHLFdBQVcsQ0FBRSxDQUFDLENBQUUsQ0FBRTtRQUVqRSxhQUFhLEVBQUUsV0FBVyxDQUFFLENBQUMsQ0FBRTtRQUUvQixXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsVUFBVSxDQUFFLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQztLQUN4RSxDQUFDLENBQUE7QUFFTixDQUFDLENBQUM7QUFHRSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqIFxuICog5ZWG5ZOBIO+9niDku7fmoLzljLrpl7TjgIHlupPlrZjljLrpl7TjgIHlt67ku7fjgIHmnIDkvY7ku7fmoLzvvIjlkKvlm6LotK3ku7fvvIlcbiAqL1xuY29uc3QgZGVsYXllcmluZ0dvb2QgPSB4ID0+IHtcblxuICAgIGlmICggIXggKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLy8g5Yid5aeL5YyW77ya5Lu35qC85pWw57uE77yI5ZCr5Zui6LSt5Lu344CB54m55Lu377yJXG4gICAgbGV0IGFsbFByaWNlQXJyOiBhbnlbIF0gPSBbIF07XG5cbiAgICAvLyDliJ3lp4vljJbvvJrlupPlrZjliJfooahcbiAgICBsZXQgYWxsU3RvY2tBcnI6IGFueVsgXSAgPSBbIF07XG5cbiAgICAvLyDml6DmnaHku7bms6jlhaUg5Li75Lqn5ZOBL+Wei+WPt+S7t+agvOOAgeWboui0reS7t1xuICAgIGNvbnN0IGRlY29yYXRlSXRlbSA9IGdvb2QgPT4ge1xuXG4gICAgICAgIGFsbFByaWNlQXJyLnB1c2goIGdvb2QucHJpY2UgKTtcbiAgICAgICAgXG4gICAgICAgIGlmICggZ29vZC5zdG9jayApIHtcbiAgICAgICAgICAgIGFsbFN0b2NrQXJyLnB1c2goIGdvb2Quc3RvY2sgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggZ29vZC5ncm91cFByaWNlICkge1xuICAgICAgICAgICAgYWxsUHJpY2VBcnIucHVzaCggZ29vZC5ncm91cFByaWNlICk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBjb25zdCBkZWNvcmF0ZUl0ZW0yID0gYWN0aXZpdGllcyA9PiB7XG4gICAgICAgIGlmICggQXJyYXkuaXNBcnJheSggYWN0aXZpdGllcyApKSB7XG4gICAgICAgICAgICBhY3Rpdml0aWVzLm1hcCggYWMgPT4ge1xuICAgICAgICAgICAgICAgIGFsbFByaWNlQXJyLnB1c2goIGFjLmFjX3ByaWNlICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCBhYy5hY19ncm91cFByaWNlICkge1xuICAgICAgICAgICAgICAgICAgICBhbGxQcmljZUFyci5wdXNoKCBhYy5hY19ncm91cFByaWNlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDml6DmnaHku7bms6jlhaUg54m55Lu35rS75Yqo55qE5Lu35qC844CB5Zui6LSt5Lu3XG4gICAgZGVjb3JhdGVJdGVtMiggeC5hY3Rpdml0aWVzICk7XG5cbiAgICAvLyDmsqHmnInlnovlj7dcbiAgICBpZiAoIHguc3RhbmRhcmRzLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgZGVjb3JhdGVJdGVtKCB4ICk7XG4gICAgXG4gICAgLy8g5pyJ5Z6L5Y+3XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeC5zdGFuZGFyZHMubWFwKCBkZWNvcmF0ZUl0ZW0gKTtcbiAgICB9XG5cbiAgICAvLyDph43mlrDmjpLluo/ku7fmoLzlkozlupPlrZhcbiAgICBhbGxQcmljZUFyciA9IGFsbFByaWNlQXJyLnNvcnQoKCB4LCB5ICkgPT4geCAtIHkgKTtcbiAgICBhbGxTdG9ja0FyciA9IGFsbFN0b2NrQXJyLnNvcnQoKCB4LCB5ICkgPT4geCAtIHkgKTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgfSwgeCwge1xuICAgICAgICBwaWQ6IHguX2lkLFxuICAgICAgICAvLyDlupPlrZjljLrpl7RcbiAgICAgICAgc3RvY2skOiBhbGxTdG9ja0Fyci5sZW5ndGggPT09IDAgP1xuICAgICAgICAgICAgYWxsU3RvY2tBcnJbIDAgXSA6XG4gICAgICAgICAgICBgJHthbGxTdG9ja0FyclsgMCBdfSB+ICR7YWxsU3RvY2tBcnJbIGFsbFN0b2NrQXJyLmxlbmd0aCAtIDEgXX1gLFxuICAgICAgICAvLyDku7fmoLzljLrpl7RcbiAgICAgICAgcHJpY2UkOiBhbGxQcmljZUFyci5sZW5ndGggPT09IDAgP1xuICAgICAgICAgICAgYWxsUHJpY2VBcnJbIDAgXSA6XG4gICAgICAgICAgICBgJHthbGxQcmljZUFyclsgMCBdfSB+ICR7YWxsUHJpY2VBcnJbIGFsbFByaWNlQXJyLmxlbmd0aCAtIDEgXX1gLFxuICAgICAgICAvLyDmnIDlpKfluYXluqblt67ku7dcbiAgICAgICAgcHJpY2VHYXA6IGFsbFByaWNlQXJyLmxlbmd0aCA9PT0gMCA/XG4gICAgICAgICAgICAwIDpcbiAgICAgICAgICAgIGAke2FsbFByaWNlQXJyWyBhbGxQcmljZUFyci5sZW5ndGggLSAxIF0gLSBhbGxQcmljZUFyclsgMCBdfWAsXG4gICAgICAgIC8vIOacgOS9juS7t+agvO+8iOWQq+Wboui0reS7t++8iVxuICAgICAgICBsb3dlc3RfcHJpY2UkOiBhbGxQcmljZUFyclsgMCBdLFxuICAgICAgICAvKiog5piv5ZCm5pyJ5rS75YqoICovXG4gICAgICAgIGhhc0FjdGl2aXR5OiBBcnJheS5pc0FycmF5KCB4LmFjdGl2aXRpZXMgKSAmJiB4LmFjdGl2aXRpZXMubGVuZ3RoID4gMCxcbiAgICB9KVxuXG59O1xuXG5leHBvcnQge1xuICAgIGRlbGF5ZXJpbmdHb29kXG59Il19