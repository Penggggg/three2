"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("./util/http");
var cloudEnv = undefined;
App({
    globalData$: {
        role: 0,
        openid: '',
        isUserAuth: false,
        userInfo: null,
        isNew: true,
        editingGood: null
    },
    globalData: {
        role: 0,
        openid: '',
        isUserAuth: false,
        userInfo: null,
        isNew: true,
        editingGood: null
    },
    watchCallBack: {},
    watchingKeys: [],
    init: function () {
        var _this = this;
        var that = this;
        this.globalData$ = Object.assign({}, this.globalData);
        Object.keys(this.globalData).map(function (key) {
            Object.defineProperty(_this.globalData, key, {
                configurable: true,
                enumerable: true,
                set: function (val) {
                    var old = that.globalData$[key];
                    that.globalData$[key] = val;
                    if (Array.isArray(that.watchCallBack[key])) {
                        that.watchCallBack[key].map(function (func) { return func(val, old); });
                    }
                },
                get: function () {
                    return that.globalData$[key];
                }
            });
        });
        wx.getSetting({
            success: function (res) {
                var isUserAuth = res.authSetting['scope.userInfo'];
                _this.setGlobalData({
                    isUserAuth: isUserAuth === undefined ? false : isUserAuth
                });
            }
        });
    },
    initCloud: function () {
        return new Promise(function (resolve, reject) {
            wx.cloud.init({
                traceUser: true,
                env: cloudEnv
            });
            resolve();
        });
    },
    getIsNewCustom: function () {
        var _this = this;
        http_1.http({
            url: 'common_is-new-customer',
            success: function (res) {
                _this.setGlobalData({
                    isNew: res.data
                });
            }
        });
    },
    getWxUserInfo: function (cb) {
        var _this = this;
        wx.getUserInfo({
            success: function (res) {
                http_1.http({
                    data: res.userInfo,
                    url: 'common_userEdit',
                    success: function (res2) {
                        if (res2 && res2.status === 200) {
                            _this.setGlobalData({
                                isUserAuth: true,
                                userInfo: res.userInfo
                            });
                            cb && cb();
                        }
                    }
                });
            }
        });
    },
    getUserInfo: function (cb) {
        var _this = this;
        wx.cloud.callFunction({
            name: 'login'
        }).then(function (res) {
            console.log('[LOGIN]', res.result);
            _this.setGlobalData(res.result);
            !!cb && cb();
        });
    },
    setGlobalData: function (obj) {
        var _this = this;
        console.log('【---- Global Set ----】', obj);
        Object.keys(obj).map(function (key) {
            _this.globalData[key] = obj[key];
        });
    },
    watch$: function (key, cb) {
        var _this = this;
        var _a;
        this.watchCallBack = Object.assign({}, this.watchCallBack, (_a = {},
            _a[key] = this.watchCallBack[key] || [],
            _a));
        this.watchCallBack[key].push(cb);
        setTimeout(function () {
            var val = _this.globalData$[key];
            var old = _this.globalData[key];
            cb(val, old);
        }, 0);
        if (!this.watchingKeys.find(function (x) { return x === key; })) {
            var that = this;
            this.watchingKeys.push(key);
        }
    },
    onLaunch: function () {
        var _this = this;
        this.init();
        this.initCloud()
            .then(function () {
            _this.getUserInfo();
            _this.getIsNewCustom();
        })
            .catch(function (e) {
            wx.showToast({
                icon: 'none',
                duration: 2000,
                title: '数据库初始错误'
            });
        });
    }
});
var Role;
(function (Role) {
    Role[Role["normal"] = 0] = "normal";
    Role[Role["admin"] = 1] = "admin";
})(Role || (Role = {}));
//# sourceMappingURL=data:application/json;base64,