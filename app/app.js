"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("./util/http");
App({
    globalData$: {
        role: 0,
        openid: '',
        isUserAuth: false,
        userInfo: null,
        isNew: true
    },
    globalData: {
        role: 0,
        openid: '',
        isUserAuth: false,
        userInfo: null,
        isNew: true
    },
    watchCallBack: {},
    watchingKeys: [],
    init: function () {
        var _this = this;
        var that = this;
        this.globalData$ = Object.assign({}, this.globalData);
        Object.keys(this.globalData).map(function (key) {
            Object.defineProperty(_this.globalData, key, {
                configurable: true,
                enumerable: true,
                set: function (val) {
                    var old = that.globalData$[key];
                    that.globalData$[key] = val;
                    if (Array.isArray(that.watchCallBack[key])) {
                        that.watchCallBack[key].map(function (func) { return func(val, old); });
                    }
                },
                get: function () {
                    return that.globalData$[key];
                }
            });
        });
        wx.getSetting({
            success: function (res) {
                var isUserAuth = res.authSetting['scope.userInfo'];
                _this.setGlobalData({
                    isUserAuth: isUserAuth === undefined ? false : isUserAuth
                });
            }
        });
    },
    initCloud: function () {
        return new Promise(function (resolve, reject) {
            wx.cloud.init({
                traceUser: true,
            });
            resolve();
        });
    },
    getIsNewCustom: function () {
        var _this = this;
        http_1.http({
            url: 'common_is-new-customer',
            success: function (res) {
                _this.setGlobalData({
                    isNew: res.data
                });
            }
        });
    },
    getWxUserInfo: function (cb) {
        var _this = this;
        wx.getUserInfo({
            success: function (res) {
                http_1.http({
                    data: res.userInfo,
                    url: 'common_userEdit',
                    success: function (res2) {
                        if (res2 && res2.status === 200) {
                            _this.setGlobalData({
                                isUserAuth: true,
                                userInfo: res.userInfo
                            });
                            cb && cb();
                        }
                    }
                });
            }
        });
    },
    getUserInfo: function () {
        var _this = this;
        wx.cloud.callFunction({
            name: 'login'
        }).then(function (res) {
            _this.setGlobalData(res.result);
        });
    },
    setGlobalData: function (obj) {
        var _this = this;
        console.log('【---- Global Set ----】', obj);
        Object.keys(obj).map(function (key) {
            _this.globalData[key] = obj[key];
        });
    },
    watch$: function (key, cb) {
        var _this = this;
        var _a;
        this.watchCallBack = Object.assign({}, this.watchCallBack, (_a = {},
            _a[key] = this.watchCallBack[key] || [],
            _a));
        this.watchCallBack[key].push(cb);
        setTimeout(function () {
            var val = _this.globalData$[key];
            var old = _this.globalData[key];
            cb(val, old);
        }, 0);
        if (!this.watchingKeys.find(function (x) { return x === key; })) {
            var that = this;
            this.watchingKeys.push(key);
        }
    },
    onLaunch: function () {
        var _this = this;
        this.init();
        this.initCloud()
            .then(function () {
            _this.getUserInfo();
            _this.getIsNewCustom();
        })
            .catch(function (e) {
            wx.showToast({
                icon: 'none',
                duration: 2000,
                title: '数据库初始错误'
            });
        });
    }
});
var Role;
(function (Role) {
    Role[Role["normal"] = 0] = "normal";
    Role[Role["admin"] = 1] = "admin";
})(Role || (Role = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQW1DO0FBRW5DLEdBQUcsQ0FBUTtJQUdQLFdBQVcsRUFBRTtRQUVULElBQUksRUFBRSxDQUFDO1FBRVAsTUFBTSxFQUFFLEVBQUU7UUFFVixVQUFVLEVBQUUsS0FBSztRQUVqQixRQUFRLEVBQUUsSUFBSTtRQUVkLEtBQUssRUFBRSxJQUFJO0tBQ2Q7SUFHRCxVQUFVLEVBQUU7UUFDUixJQUFJLEVBQUUsQ0FBQztRQUNQLE1BQU0sRUFBRSxFQUFFO1FBQ1YsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFLElBQUk7UUFDZCxLQUFLLEVBQUUsSUFBSTtLQUNkO0lBR0QsYUFBYSxFQUFFLEVBQUc7SUFHbEIsWUFBWSxFQUFFLEVBQUc7SUFHakIsSUFBSTtRQUFKLGlCQW9DQztRQWxDRyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFHbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFFLENBQUM7UUFHeEQsTUFBTSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsVUFBVSxDQUFFLENBQUMsR0FBRyxDQUFFLFVBQUEsR0FBRztZQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFFLEtBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO2dCQUN6QyxZQUFZLEVBQUUsSUFBSTtnQkFDbEIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLEdBQUcsRUFBRSxVQUFVLEdBQUc7b0JBQ2QsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBRSxHQUFHLENBQUUsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBRSxHQUFHLENBQUUsR0FBRyxHQUFHLENBQUM7b0JBQzlCLElBQUssS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsYUFBYSxDQUFFLEdBQUcs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LENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFBO0lBRVYsQ0FBQztDQUNKLENBQUMsQ0FBQztBQWtCSCxJQUFLLElBR0o7QUFIRCxXQUFLLElBQUk7SUFDTCxtQ0FBTSxDQUFBO0lBQ04saUNBQUssQ0FBQTtBQUNULENBQUMsRUFISSxJQUFJLEtBQUosSUFBSSxRQUdSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaHR0cCB9IGZyb20gJy4vdXRpbC9odHRwJztcblxuQXBwPE15QXBwPih7XG5cbiAgICAvKiogZmFkZSBnbG9iYWxEYXRhICovXG4gICAgZ2xvYmFsRGF0YSQ6IHtcbiAgICAgICAgLy8g55m75b2V5Lq65p2D6ZmQXG4gICAgICAgIHJvbGU6IDAsXG4gICAgICAgIC8vIOeZu+W9leS6umlkXG4gICAgICAgIG9wZW5pZDogJycsXG4gICAgICAgIC8vIOaYr+WQpuW3sue7j+aOiOadg+eUqOaIt+S/oeaBr1xuICAgICAgICBpc1VzZXJBdXRoOiBmYWxzZSxcbiAgICAgICAgLy8g55So5oi35L+h5oGvXG4gICAgICAgIHVzZXJJbmZvOiBudWxsLFxuICAgICAgICAvKiog5piv5ZCm5piv5paw5a6i5oi3ICovXG4gICAgICAgIGlzTmV3OiB0cnVlXG4gICAgfSxcblxuICAgIC8qKiDlhajlsYBzdG9yZSAqL1xuICAgIGdsb2JhbERhdGE6IHtcbiAgICAgICAgcm9sZTogMCxcbiAgICAgICAgb3BlbmlkOiAnJyxcbiAgICAgICAgaXNVc2VyQXV0aDogZmFsc2UsXG4gICAgICAgIHVzZXJJbmZvOiBudWxsLFxuICAgICAgICBpc05ldzogdHJ1ZVxuICAgIH0sXG5cbiAgICAvKiog55uR5ZCs5Ye95pWw55qE5a+56LGh5pWw57uEICovXG4gICAgd2F0Y2hDYWxsQmFjazogeyB9LFxuXG4gICAgLyoqIOebkeWQrOWIl+ihqCAqL1xuICAgIHdhdGNoaW5nS2V5czogWyBdLFxuXG4gICAgLyoqIOWIneWni+WMliAqL1xuICAgIGluaXQoICkge1xuXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgICAgICBcbiAgICAgICAgLy8g5YWo5bGA5pWw5o2uXG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YSQgPSBPYmplY3QuYXNzaWduKHsgfSwgdGhpcy5nbG9iYWxEYXRhICk7XG5cbiAgICAgICAgLy8gd2F0Y2hcbiAgICAgICAgT2JqZWN0LmtleXMoIHRoaXMuZ2xvYmFsRGF0YSApLm1hcCgga2V5ID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy5nbG9iYWxEYXRhLCBrZXksIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCB2YWwgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZCA9IHRoYXQuZ2xvYmFsRGF0YSRbIGtleSBdO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lmdsb2JhbERhdGEkWyBrZXkgXSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KCB0aGF0LndhdGNoQ2FsbEJhY2tbIGtleSBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC53YXRjaENhbGxCYWNrWyBrZXkgXS5tYXAoZnVuYyA9PiBmdW5jKCB2YWwsIG9sZCApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiggKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0Lmdsb2JhbERhdGEkWyBrZXkgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g55So5oi35L+h5oGvXG4gICAgICAgIHd4LmdldFNldHRpbmcoe1xuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgICAvLyDmmK/lkKblt7Lnu4/mjojmnYNcbiAgICAgICAgICAgICAgICBjb25zdCBpc1VzZXJBdXRoID0gcmVzLmF1dGhTZXR0aW5nWydzY29wZS51c2VySW5mbyddO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0R2xvYmFsRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGlzVXNlckF1dGg6IGlzVXNlckF1dGggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogaXNVc2VyQXV0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvKiog5Yid5aeL5YyW5LqR5Ye95pWw5pWw5o2u5bqTICovXG4gICAgaW5pdENsb3VkKCApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuXG4gICAgICAgICAgICAvLyDkupFcbiAgICAgICAgICAgIHd4LmNsb3VkLmluaXQoe1xuICAgICAgICAgICAgICAgIHRyYWNlVXNlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBlbnY6ICdwcm9kLWI4N2I3NidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZSggKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiDmmK/lkKbkuLrmlrDlrqIgKi9cbiAgICBnZXRJc05ld0N1c3RvbSggKSB7XG4gICAgICAgIGh0dHAoe1xuICAgICAgICAgICAgdXJsOiAnY29tbW9uX2lzLW5ldy1jdXN0b21lcicsXG4gICAgICAgICAgICBzdWNjZXNzOiByZXMgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0R2xvYmFsRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGlzTmV3OiByZXMuZGF0YVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qKiDlhajlsYDmlrnms5XvvIzojrflj5blvq7kv6HnlKjmiLfnmbvlvZXkv6Hmga/jgIHmjojmnYPjgIHkuIrkvKDkv53lrZggKi9cbiAgICBnZXRXeFVzZXJJbmZvKCBjYiApIHtcbiAgICAgICAgd3guZ2V0VXNlckluZm8oe1xuICAgICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgICAgICBodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzLnVzZXJJbmZvLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdjb21tb25fdXNlckVkaXQnLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiByZXMyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmVzMiAmJiByZXMyLnN0YXR1cyA9PT0gMjAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0R2xvYmFsRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVXNlckF1dGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJbmZvOiByZXMudXNlckluZm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiAmJiBjYiggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiog6I635Y+W55So5oi35p2D6ZmQ5L+h5oGvIHJvbGUvIG9wZW5pZCAqL1xuICAgIGdldFVzZXJJbmZvKCApIHtcbiAgICAgICAgd3guY2xvdWQuY2FsbEZ1bmN0aW9uKHtcbiAgICAgICAgICAgIG5hbWU6ICdsb2dpbidcbiAgICAgICAgfSkudGhlbigoIHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldEdsb2JhbERhdGEoIHJlcy5yZXN1bHQgKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiDorr7nva7lhajlsYDmlbDmja4gKi9cbiAgICBzZXRHbG9iYWxEYXRhKCBvYmogKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCAn44CQLS0tLSBHbG9iYWwgU2V0IC0tLS3jgJEnLCBvYmogKVxuICAgICAgICBPYmplY3Qua2V5cyggb2JqICkubWFwKCBrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhWyBrZXkgXSA9IG9ialsga2V5IF07XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogd2F0Y2jlh73mlbAgKi9cbiAgICB3YXRjaCQoIGtleSwgY2IgKSB7XG4gICAgICAgIHRoaXMud2F0Y2hDYWxsQmFjayA9IE9iamVjdC5hc3NpZ24oeyB9LCB0aGlzLndhdGNoQ2FsbEJhY2ssIHtcbiAgICAgICAgICAgIFsga2V5IF06IHRoaXMud2F0Y2hDYWxsQmFja1sga2V5IF0gfHwgWyBdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLndhdGNoQ2FsbEJhY2tbIGtleSBdLnB1c2goIGNiICk7XG4gICAgICAgIC8vIOeri+mprOaJp+ihjOS4gOS4i2NiXG4gICAgICAgIHNldFRpbWVvdXQoKCApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuZ2xvYmFsRGF0YSRbIGtleSBdO1xuICAgICAgICAgICAgY29uc3Qgb2xkID0gdGhpcy5nbG9iYWxEYXRhWyBrZXkgXTtcbiAgICAgICAgICAgIGNiKCB2YWwsIG9sZCApO1xuICAgICAgICB9LCAwICk7XG5cbiAgICAgICAgLy8g5omn6KGMc2V055qE5pe25YCZ77yM5YaN5omn6KGM5LiA5LiLY2JcbiAgICAgICAgaWYgKCAhdGhpcy53YXRjaGluZ0tleXMuZmluZCggeCA9PiB4ID09PSBrZXkgKSkge1xuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLndhdGNoaW5nS2V5cy5wdXNoKCBrZXkgKTtcbiAgICAgICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy5nbG9iYWxEYXRhLCBrZXksIHtcbiAgICAgICAgICAgIC8vICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICBzZXQ6IGZ1bmN0aW9uKCB2YWwgKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGAke2tleX3ooqtzZXRgLCB2YWwgKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgY29uc3Qgb2xkID0gdGhhdC5nbG9iYWxEYXRhJFsga2V5IF07XG4gICAgICAgICAgICAvLyAgICAgICAgIHRoYXQuZ2xvYmFsRGF0YSRbIGtleSBdID0gdmFsO1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGF0LndhdGNoQ2FsbEJhY2tbIGtleSBdLm1hcChmdW5jID0+IGZ1bmMoIHZhbCwgb2xkICkpO1xuICAgICAgICAgICAgLy8gICAgIH0sXG4gICAgICAgICAgICAvLyAgICAgZ2V0OiBmdW5jdGlvbiggKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGF0Lmdsb2JhbERhdGEkWyBrZXkgXTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gIFxuICAgIC8qKiDnlJ/lkb3lkajmnJ8gKi9cbiAgICBvbkxhdW5jaDogZnVuY3Rpb24oICkge1xuICAgICAgICB0aGlzLmluaXQoICk7XG4gICAgICAgIHRoaXMuaW5pdENsb3VkKCApXG4gICAgICAgICAgICAudGhlbigoICkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0VXNlckluZm8oICk7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRJc05ld0N1c3RvbSggKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goIGUgPT4ge1xuICAgICAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIGljb246ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMDAsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5pWw5o2u5bqT5Yid5aeL6ZSZ6K+vJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXG4gICAgfVxufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXlBcHAge1xuICAgIGdsb2JhbERhdGE6IGdsb2JhbFN0YXRlLFxuICAgIGdsb2JhbERhdGEkOiBnbG9iYWxTdGF0ZSxcbiAgICB3YXRjaENhbGxCYWNrOiB7XG4gICAgICAgIFsga2V5OiBzdHJpbmcgXTogKCggdmFsMTogYW55LCB2YWwyOiBhbnkgKSA9PiB2b2lkKVsgXVxuICAgIH1cbiAgICB3YXRjaGluZ0tleXM6IHN0cmluZ1sgXVxuICAgIGluaXQ6ICggKSA9PiB2b2lkXG4gICAgaW5pdENsb3VkOiAoICkgPT4gUHJvbWlzZTxhbnk+XG4gICAgZ2V0VXNlckluZm86ICggKSA9PiB2b2lkLFxuICAgIGdldElzTmV3Q3VzdG9tOiAgKCApID0+IHZvaWQsXG4gICAgZ2V0V3hVc2VySW5mbzogKCBjYj86ICggKSA9PiB2b2lkICkgPT4gdm9pZCxcbiAgICBzZXRHbG9iYWxEYXRhOiA8SyBleHRlbmRzIGtleW9mIGdsb2JhbFN0YXRlPiggZGF0YTogZ2xvYmFsU3RhdGUgfCBQaWNrPGdsb2JhbFN0YXRlLCBLPiApID0+IHZvaWQsXG4gICAgd2F0Y2gkOiAoIGtleToga2V5b2YgZ2xvYmFsU3RhdGUsIGFueSApID0+IHZvaWRcbn1cblxuZW51bSBSb2xlIHtcbiAgICBub3JtYWwsXG4gICAgYWRtaW5cbn1cblxudHlwZSBnbG9iYWxTdGF0ZSA9IHtcbiAgICByb2xlOiBSb2xlLFxuICAgIG9wZW5pZDogc3RyaW5nLFxuICAgIGlzVXNlckF1dGg6IGJvb2xlYW4sXG4gICAgdXNlckluZm86IGFueVxuICAgIGlzTmV3OiBib29sZWFuXG59Il19