"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("./util/http");
App({
    globalData$: {
        role: 0,
        openid: '',
        isUserAuth: false,
        userInfo: null
    },
    globalData: {
        role: 0,
        openid: '',
        isUserAuth: false,
        userInfo: null
    },
    watchCallBack: {},
    watchingKeys: [],
    init: function () {
        var _this = this;
        wx.cloud.init({
            traceUser: true
        });
        this.globalData$ = Object.assign({}, this.globalData);
        wx.getSetting({
            success: function (res) {
                var isUserAuth = res.authSetting['scope.userInfo'];
                _this.setGlobalData({
                    isUserAuth: isUserAuth === undefined ? false : isUserAuth
                });
            }
        });
    },
    getWxUserInfo: function (cb) {
        var _this = this;
        wx.getUserInfo({
            success: function (res) {
                http_1.http({
                    data: res.userInfo,
                    url: 'api-user-edit',
                    success: function (res2) {
                        if (res2 && res2.status === 200) {
                            _this.setGlobalData({
                                isUserAuth: true,
                                userInfo: res.userInfo
                            });
                            cb && cb();
                        }
                    }
                });
            }
        });
    },
    getUserInfo: function () {
        var _this = this;
        wx.cloud.callFunction({
            name: 'login'
        }).then(function (res) {
            _this.setGlobalData(res.result);
        });
    },
    setGlobalData: function (obj) {
        var _this = this;
        console.log('setGlobalData...', obj);
        Object.keys(obj).map(function (key) {
            _this.globalData[key] = obj[key];
        });
    },
    watch$: function (key, cb) {
        var _a;
        this.watchCallBack = Object.assign({}, this.watchCallBack, (_a = {},
            _a[key] = this.watchCallBack[key] || [],
            _a));
        this.watchCallBack[key].push(cb);
        console.log('watch$....', key);
        var old = this.globalData[key];
        cb(old, old);
        if (!this.watchingKeys.find(function (x) { return x === key; })) {
            var that_1 = this;
            this.watchingKeys.push(key);
            Object.defineProperty(this.globalData, key, {
                configurable: true,
                enumerable: true,
                set: function (val) {
                    console.log(key + "\u88ABset", val);
                    var old = that_1.globalData$[key];
                    that_1.globalData$[key] = val;
                    that_1.watchCallBack[key].map(function (func) { return func(val, old); });
                },
                get: function () {
                    return that_1.globalData$[key];
                }
            });
        }
    },
    onLaunch: function () {
        this.init();
        this.getUserInfo();
    }
});
var Role;
(function (Role) {
    Role[Role["normal"] = 0] = "normal";
    Role[Role["admin"] = 1] = "admin";
})(Role || (Role = {}));
//# sourceMappingURL=data:application/json;base64,